// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newShortAnswerSectionAnswer(db *gorm.DB, opts ...gen.DOOption) shortAnswerSectionAnswer {
	_shortAnswerSectionAnswer := shortAnswerSectionAnswer{}

	_shortAnswerSectionAnswer.shortAnswerSectionAnswerDo.UseDB(db, opts...)
	_shortAnswerSectionAnswer.shortAnswerSectionAnswerDo.UseModel(&entity.ShortAnswerSectionAnswer{})

	tableName := _shortAnswerSectionAnswer.shortAnswerSectionAnswerDo.TableName()
	_shortAnswerSectionAnswer.ALL = field.NewAsterisk(tableName)
	_shortAnswerSectionAnswer.Id = field.NewField(tableName, "id")
	_shortAnswerSectionAnswer.CreatedAt = field.NewTime(tableName, "created_at")
	_shortAnswerSectionAnswer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_shortAnswerSectionAnswer.DeletedAt = field.NewField(tableName, "deleted_at")
	_shortAnswerSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_shortAnswerSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")
	_shortAnswerSectionAnswer.Answer = field.NewString(tableName, "answer")

	_shortAnswerSectionAnswer.fillFieldMap()

	return _shortAnswerSectionAnswer
}

type shortAnswerSectionAnswer struct {
	shortAnswerSectionAnswerDo shortAnswerSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OwnerID   field.Field
	OwnerType field.String
	Answer    field.String

	fieldMap map[string]field.Expr
}

func (s shortAnswerSectionAnswer) Table(newTableName string) *shortAnswerSectionAnswer {
	s.shortAnswerSectionAnswerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shortAnswerSectionAnswer) As(alias string) *shortAnswerSectionAnswer {
	s.shortAnswerSectionAnswerDo.DO = *(s.shortAnswerSectionAnswerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shortAnswerSectionAnswer) updateTableName(table string) *shortAnswerSectionAnswer {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.OwnerID = field.NewField(table, "owner_id")
	s.OwnerType = field.NewString(table, "owner_type")
	s.Answer = field.NewString(table, "answer")

	s.fillFieldMap()

	return s
}

func (s *shortAnswerSectionAnswer) WithContext(ctx context.Context) IShortAnswerSectionAnswerDo {
	return s.shortAnswerSectionAnswerDo.WithContext(ctx)
}

func (s shortAnswerSectionAnswer) TableName() string { return s.shortAnswerSectionAnswerDo.TableName() }

func (s shortAnswerSectionAnswer) Alias() string { return s.shortAnswerSectionAnswerDo.Alias() }

func (s shortAnswerSectionAnswer) Columns(cols ...field.Expr) gen.Columns {
	return s.shortAnswerSectionAnswerDo.Columns(cols...)
}

func (s *shortAnswerSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shortAnswerSectionAnswer) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.Id
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["owner_id"] = s.OwnerID
	s.fieldMap["owner_type"] = s.OwnerType
	s.fieldMap["answer"] = s.Answer
}

func (s shortAnswerSectionAnswer) clone(db *gorm.DB) shortAnswerSectionAnswer {
	s.shortAnswerSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shortAnswerSectionAnswer) replaceDB(db *gorm.DB) shortAnswerSectionAnswer {
	s.shortAnswerSectionAnswerDo.ReplaceDB(db)
	return s
}

type shortAnswerSectionAnswerDo struct{ gen.DO }

type IShortAnswerSectionAnswerDo interface {
	gen.SubQuery
	Debug() IShortAnswerSectionAnswerDo
	WithContext(ctx context.Context) IShortAnswerSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShortAnswerSectionAnswerDo
	WriteDB() IShortAnswerSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShortAnswerSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShortAnswerSectionAnswerDo
	Not(conds ...gen.Condition) IShortAnswerSectionAnswerDo
	Or(conds ...gen.Condition) IShortAnswerSectionAnswerDo
	Select(conds ...field.Expr) IShortAnswerSectionAnswerDo
	Where(conds ...gen.Condition) IShortAnswerSectionAnswerDo
	Order(conds ...field.Expr) IShortAnswerSectionAnswerDo
	Distinct(cols ...field.Expr) IShortAnswerSectionAnswerDo
	Omit(cols ...field.Expr) IShortAnswerSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo
	Group(cols ...field.Expr) IShortAnswerSectionAnswerDo
	Having(conds ...gen.Condition) IShortAnswerSectionAnswerDo
	Limit(limit int) IShortAnswerSectionAnswerDo
	Offset(offset int) IShortAnswerSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShortAnswerSectionAnswerDo
	Unscoped() IShortAnswerSectionAnswerDo
	Create(values ...*entity.ShortAnswerSectionAnswer) error
	CreateInBatches(values []*entity.ShortAnswerSectionAnswer, batchSize int) error
	Save(values ...*entity.ShortAnswerSectionAnswer) error
	First() (*entity.ShortAnswerSectionAnswer, error)
	Take() (*entity.ShortAnswerSectionAnswer, error)
	Last() (*entity.ShortAnswerSectionAnswer, error)
	Find() ([]*entity.ShortAnswerSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShortAnswerSectionAnswer, err error)
	FindInBatches(result *[]*entity.ShortAnswerSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ShortAnswerSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShortAnswerSectionAnswerDo
	Assign(attrs ...field.AssignExpr) IShortAnswerSectionAnswerDo
	Joins(fields ...field.RelationField) IShortAnswerSectionAnswerDo
	Preload(fields ...field.RelationField) IShortAnswerSectionAnswerDo
	FirstOrInit() (*entity.ShortAnswerSectionAnswer, error)
	FirstOrCreate() (*entity.ShortAnswerSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.ShortAnswerSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShortAnswerSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shortAnswerSectionAnswerDo) Debug() IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Debug())
}

func (s shortAnswerSectionAnswerDo) WithContext(ctx context.Context) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shortAnswerSectionAnswerDo) ReadDB() IShortAnswerSectionAnswerDo {
	return s.Clauses(dbresolver.Read)
}

func (s shortAnswerSectionAnswerDo) WriteDB() IShortAnswerSectionAnswerDo {
	return s.Clauses(dbresolver.Write)
}

func (s shortAnswerSectionAnswerDo) Session(config *gorm.Session) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Session(config))
}

func (s shortAnswerSectionAnswerDo) Clauses(conds ...clause.Expression) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shortAnswerSectionAnswerDo) Returning(value interface{}, columns ...string) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shortAnswerSectionAnswerDo) Not(conds ...gen.Condition) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shortAnswerSectionAnswerDo) Or(conds ...gen.Condition) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shortAnswerSectionAnswerDo) Select(conds ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shortAnswerSectionAnswerDo) Where(conds ...gen.Condition) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shortAnswerSectionAnswerDo) Order(conds ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shortAnswerSectionAnswerDo) Distinct(cols ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shortAnswerSectionAnswerDo) Omit(cols ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shortAnswerSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shortAnswerSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shortAnswerSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shortAnswerSectionAnswerDo) Group(cols ...field.Expr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shortAnswerSectionAnswerDo) Having(conds ...gen.Condition) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shortAnswerSectionAnswerDo) Limit(limit int) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shortAnswerSectionAnswerDo) Offset(offset int) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shortAnswerSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shortAnswerSectionAnswerDo) Unscoped() IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shortAnswerSectionAnswerDo) Create(values ...*entity.ShortAnswerSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shortAnswerSectionAnswerDo) CreateInBatches(values []*entity.ShortAnswerSectionAnswer, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shortAnswerSectionAnswerDo) Save(values ...*entity.ShortAnswerSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shortAnswerSectionAnswerDo) First() (*entity.ShortAnswerSectionAnswer, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSectionAnswer), nil
	}
}

func (s shortAnswerSectionAnswerDo) Take() (*entity.ShortAnswerSectionAnswer, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSectionAnswer), nil
	}
}

func (s shortAnswerSectionAnswerDo) Last() (*entity.ShortAnswerSectionAnswer, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSectionAnswer), nil
	}
}

func (s shortAnswerSectionAnswerDo) Find() ([]*entity.ShortAnswerSectionAnswer, error) {
	result, err := s.DO.Find()
	return result.([]*entity.ShortAnswerSectionAnswer), err
}

func (s shortAnswerSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShortAnswerSectionAnswer, err error) {
	buf := make([]*entity.ShortAnswerSectionAnswer, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shortAnswerSectionAnswerDo) FindInBatches(result *[]*entity.ShortAnswerSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shortAnswerSectionAnswerDo) Attrs(attrs ...field.AssignExpr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shortAnswerSectionAnswerDo) Assign(attrs ...field.AssignExpr) IShortAnswerSectionAnswerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shortAnswerSectionAnswerDo) Joins(fields ...field.RelationField) IShortAnswerSectionAnswerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shortAnswerSectionAnswerDo) Preload(fields ...field.RelationField) IShortAnswerSectionAnswerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shortAnswerSectionAnswerDo) FirstOrInit() (*entity.ShortAnswerSectionAnswer, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSectionAnswer), nil
	}
}

func (s shortAnswerSectionAnswerDo) FirstOrCreate() (*entity.ShortAnswerSectionAnswer, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSectionAnswer), nil
	}
}

func (s shortAnswerSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.ShortAnswerSectionAnswer, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shortAnswerSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shortAnswerSectionAnswerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shortAnswerSectionAnswerDo) Delete(models ...*entity.ShortAnswerSectionAnswer) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shortAnswerSectionAnswerDo) withDO(do gen.Dao) *shortAnswerSectionAnswerDo {
	s.DO = *do.(*gen.DO)
	return s
}
