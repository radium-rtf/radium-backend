// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newShortAnswerSection(db *gorm.DB, opts ...gen.DOOption) shortAnswerSection {
	_shortAnswerSection := shortAnswerSection{}

	_shortAnswerSection.shortAnswerSectionDo.UseDB(db, opts...)
	_shortAnswerSection.shortAnswerSectionDo.UseModel(&entity.ShortAnswerSection{})

	tableName := _shortAnswerSection.shortAnswerSectionDo.TableName()
	_shortAnswerSection.ALL = field.NewAsterisk(tableName)
	_shortAnswerSection.Id = field.NewField(tableName, "id")
	_shortAnswerSection.CreatedAt = field.NewTime(tableName, "created_at")
	_shortAnswerSection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_shortAnswerSection.DeletedAt = field.NewField(tableName, "deleted_at")
	_shortAnswerSection.Question = field.NewString(tableName, "question")
	_shortAnswerSection.Answer = field.NewString(tableName, "answer")
	_shortAnswerSection.OwnerID = field.NewField(tableName, "owner_id")
	_shortAnswerSection.OwnerType = field.NewString(tableName, "owner_type")

	_shortAnswerSection.fillFieldMap()

	return _shortAnswerSection
}

type shortAnswerSection struct {
	shortAnswerSectionDo shortAnswerSectionDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Question  field.String
	Answer    field.String
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (s shortAnswerSection) Table(newTableName string) *shortAnswerSection {
	s.shortAnswerSectionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shortAnswerSection) As(alias string) *shortAnswerSection {
	s.shortAnswerSectionDo.DO = *(s.shortAnswerSectionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shortAnswerSection) updateTableName(table string) *shortAnswerSection {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Question = field.NewString(table, "question")
	s.Answer = field.NewString(table, "answer")
	s.OwnerID = field.NewField(table, "owner_id")
	s.OwnerType = field.NewString(table, "owner_type")

	s.fillFieldMap()

	return s
}

func (s *shortAnswerSection) WithContext(ctx context.Context) IShortAnswerSectionDo {
	return s.shortAnswerSectionDo.WithContext(ctx)
}

func (s shortAnswerSection) TableName() string { return s.shortAnswerSectionDo.TableName() }

func (s shortAnswerSection) Alias() string { return s.shortAnswerSectionDo.Alias() }

func (s *shortAnswerSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shortAnswerSection) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.Id
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["question"] = s.Question
	s.fieldMap["answer"] = s.Answer
	s.fieldMap["owner_id"] = s.OwnerID
	s.fieldMap["owner_type"] = s.OwnerType
}

func (s shortAnswerSection) clone(db *gorm.DB) shortAnswerSection {
	s.shortAnswerSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shortAnswerSection) replaceDB(db *gorm.DB) shortAnswerSection {
	s.shortAnswerSectionDo.ReplaceDB(db)
	return s
}

type shortAnswerSectionDo struct{ gen.DO }

type IShortAnswerSectionDo interface {
	gen.SubQuery
	Debug() IShortAnswerSectionDo
	WithContext(ctx context.Context) IShortAnswerSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShortAnswerSectionDo
	WriteDB() IShortAnswerSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShortAnswerSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShortAnswerSectionDo
	Not(conds ...gen.Condition) IShortAnswerSectionDo
	Or(conds ...gen.Condition) IShortAnswerSectionDo
	Select(conds ...field.Expr) IShortAnswerSectionDo
	Where(conds ...gen.Condition) IShortAnswerSectionDo
	Order(conds ...field.Expr) IShortAnswerSectionDo
	Distinct(cols ...field.Expr) IShortAnswerSectionDo
	Omit(cols ...field.Expr) IShortAnswerSectionDo
	Join(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo
	Group(cols ...field.Expr) IShortAnswerSectionDo
	Having(conds ...gen.Condition) IShortAnswerSectionDo
	Limit(limit int) IShortAnswerSectionDo
	Offset(offset int) IShortAnswerSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShortAnswerSectionDo
	Unscoped() IShortAnswerSectionDo
	Create(values ...*entity.ShortAnswerSection) error
	CreateInBatches(values []*entity.ShortAnswerSection, batchSize int) error
	Save(values ...*entity.ShortAnswerSection) error
	First() (*entity.ShortAnswerSection, error)
	Take() (*entity.ShortAnswerSection, error)
	Last() (*entity.ShortAnswerSection, error)
	Find() ([]*entity.ShortAnswerSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShortAnswerSection, err error)
	FindInBatches(result *[]*entity.ShortAnswerSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ShortAnswerSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShortAnswerSectionDo
	Assign(attrs ...field.AssignExpr) IShortAnswerSectionDo
	Joins(fields ...field.RelationField) IShortAnswerSectionDo
	Preload(fields ...field.RelationField) IShortAnswerSectionDo
	FirstOrInit() (*entity.ShortAnswerSection, error)
	FirstOrCreate() (*entity.ShortAnswerSection, error)
	FindByPage(offset int, limit int) (result []*entity.ShortAnswerSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShortAnswerSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shortAnswerSectionDo) Debug() IShortAnswerSectionDo {
	return s.withDO(s.DO.Debug())
}

func (s shortAnswerSectionDo) WithContext(ctx context.Context) IShortAnswerSectionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shortAnswerSectionDo) ReadDB() IShortAnswerSectionDo {
	return s.Clauses(dbresolver.Read)
}

func (s shortAnswerSectionDo) WriteDB() IShortAnswerSectionDo {
	return s.Clauses(dbresolver.Write)
}

func (s shortAnswerSectionDo) Session(config *gorm.Session) IShortAnswerSectionDo {
	return s.withDO(s.DO.Session(config))
}

func (s shortAnswerSectionDo) Clauses(conds ...clause.Expression) IShortAnswerSectionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shortAnswerSectionDo) Returning(value interface{}, columns ...string) IShortAnswerSectionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shortAnswerSectionDo) Not(conds ...gen.Condition) IShortAnswerSectionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shortAnswerSectionDo) Or(conds ...gen.Condition) IShortAnswerSectionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shortAnswerSectionDo) Select(conds ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shortAnswerSectionDo) Where(conds ...gen.Condition) IShortAnswerSectionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shortAnswerSectionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IShortAnswerSectionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s shortAnswerSectionDo) Order(conds ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shortAnswerSectionDo) Distinct(cols ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shortAnswerSectionDo) Omit(cols ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shortAnswerSectionDo) Join(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shortAnswerSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shortAnswerSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shortAnswerSectionDo) Group(cols ...field.Expr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shortAnswerSectionDo) Having(conds ...gen.Condition) IShortAnswerSectionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shortAnswerSectionDo) Limit(limit int) IShortAnswerSectionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shortAnswerSectionDo) Offset(offset int) IShortAnswerSectionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shortAnswerSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShortAnswerSectionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shortAnswerSectionDo) Unscoped() IShortAnswerSectionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shortAnswerSectionDo) Create(values ...*entity.ShortAnswerSection) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shortAnswerSectionDo) CreateInBatches(values []*entity.ShortAnswerSection, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shortAnswerSectionDo) Save(values ...*entity.ShortAnswerSection) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shortAnswerSectionDo) First() (*entity.ShortAnswerSection, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSection), nil
	}
}

func (s shortAnswerSectionDo) Take() (*entity.ShortAnswerSection, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSection), nil
	}
}

func (s shortAnswerSectionDo) Last() (*entity.ShortAnswerSection, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSection), nil
	}
}

func (s shortAnswerSectionDo) Find() ([]*entity.ShortAnswerSection, error) {
	result, err := s.DO.Find()
	return result.([]*entity.ShortAnswerSection), err
}

func (s shortAnswerSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShortAnswerSection, err error) {
	buf := make([]*entity.ShortAnswerSection, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shortAnswerSectionDo) FindInBatches(result *[]*entity.ShortAnswerSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shortAnswerSectionDo) Attrs(attrs ...field.AssignExpr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shortAnswerSectionDo) Assign(attrs ...field.AssignExpr) IShortAnswerSectionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shortAnswerSectionDo) Joins(fields ...field.RelationField) IShortAnswerSectionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shortAnswerSectionDo) Preload(fields ...field.RelationField) IShortAnswerSectionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shortAnswerSectionDo) FirstOrInit() (*entity.ShortAnswerSection, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSection), nil
	}
}

func (s shortAnswerSectionDo) FirstOrCreate() (*entity.ShortAnswerSection, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShortAnswerSection), nil
	}
}

func (s shortAnswerSectionDo) FindByPage(offset int, limit int) (result []*entity.ShortAnswerSection, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shortAnswerSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shortAnswerSectionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shortAnswerSectionDo) Delete(models ...*entity.ShortAnswerSection) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shortAnswerSectionDo) withDO(do gen.Dao) *shortAnswerSectionDo {
	s.DO = *do.(*gen.DO)
	return s
}
