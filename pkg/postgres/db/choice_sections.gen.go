// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newChoiceSection(db *gorm.DB, opts ...gen.DOOption) choiceSection {
	_choiceSection := choiceSection{}

	_choiceSection.choiceSectionDo.UseDB(db, opts...)
	_choiceSection.choiceSectionDo.UseModel(&entity.ChoiceSection{})

	tableName := _choiceSection.choiceSectionDo.TableName()
	_choiceSection.ALL = field.NewAsterisk(tableName)
	_choiceSection.Id = field.NewField(tableName, "id")
	_choiceSection.CreatedAt = field.NewTime(tableName, "created_at")
	_choiceSection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_choiceSection.DeletedAt = field.NewField(tableName, "deleted_at")
	_choiceSection.Question = field.NewString(tableName, "question")
	_choiceSection.Answer = field.NewString(tableName, "answer")
	_choiceSection.Variants = field.NewField(tableName, "variants")
	_choiceSection.OwnerID = field.NewField(tableName, "owner_id")
	_choiceSection.OwnerType = field.NewString(tableName, "owner_type")

	_choiceSection.fillFieldMap()

	return _choiceSection
}

type choiceSection struct {
	choiceSectionDo choiceSectionDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Question  field.String
	Answer    field.String
	Variants  field.Field
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (c choiceSection) Table(newTableName string) *choiceSection {
	c.choiceSectionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c choiceSection) As(alias string) *choiceSection {
	c.choiceSectionDo.DO = *(c.choiceSectionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *choiceSection) updateTableName(table string) *choiceSection {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Question = field.NewString(table, "question")
	c.Answer = field.NewString(table, "answer")
	c.Variants = field.NewField(table, "variants")
	c.OwnerID = field.NewField(table, "owner_id")
	c.OwnerType = field.NewString(table, "owner_type")

	c.fillFieldMap()

	return c
}

func (c *choiceSection) WithContext(ctx context.Context) IChoiceSectionDo {
	return c.choiceSectionDo.WithContext(ctx)
}

func (c choiceSection) TableName() string { return c.choiceSectionDo.TableName() }

func (c choiceSection) Alias() string { return c.choiceSectionDo.Alias() }

func (c choiceSection) Columns(cols ...field.Expr) gen.Columns {
	return c.choiceSectionDo.Columns(cols...)
}

func (c *choiceSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *choiceSection) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.Id
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["question"] = c.Question
	c.fieldMap["answer"] = c.Answer
	c.fieldMap["variants"] = c.Variants
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["owner_type"] = c.OwnerType
}

func (c choiceSection) clone(db *gorm.DB) choiceSection {
	c.choiceSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c choiceSection) replaceDB(db *gorm.DB) choiceSection {
	c.choiceSectionDo.ReplaceDB(db)
	return c
}

type choiceSectionDo struct{ gen.DO }

type IChoiceSectionDo interface {
	gen.SubQuery
	Debug() IChoiceSectionDo
	WithContext(ctx context.Context) IChoiceSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChoiceSectionDo
	WriteDB() IChoiceSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChoiceSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChoiceSectionDo
	Not(conds ...gen.Condition) IChoiceSectionDo
	Or(conds ...gen.Condition) IChoiceSectionDo
	Select(conds ...field.Expr) IChoiceSectionDo
	Where(conds ...gen.Condition) IChoiceSectionDo
	Order(conds ...field.Expr) IChoiceSectionDo
	Distinct(cols ...field.Expr) IChoiceSectionDo
	Omit(cols ...field.Expr) IChoiceSectionDo
	Join(table schema.Tabler, on ...field.Expr) IChoiceSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionDo
	Group(cols ...field.Expr) IChoiceSectionDo
	Having(conds ...gen.Condition) IChoiceSectionDo
	Limit(limit int) IChoiceSectionDo
	Offset(offset int) IChoiceSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChoiceSectionDo
	Unscoped() IChoiceSectionDo
	Create(values ...*entity.ChoiceSection) error
	CreateInBatches(values []*entity.ChoiceSection, batchSize int) error
	Save(values ...*entity.ChoiceSection) error
	First() (*entity.ChoiceSection, error)
	Take() (*entity.ChoiceSection, error)
	Last() (*entity.ChoiceSection, error)
	Find() ([]*entity.ChoiceSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ChoiceSection, err error)
	FindInBatches(result *[]*entity.ChoiceSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ChoiceSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChoiceSectionDo
	Assign(attrs ...field.AssignExpr) IChoiceSectionDo
	Joins(fields ...field.RelationField) IChoiceSectionDo
	Preload(fields ...field.RelationField) IChoiceSectionDo
	FirstOrInit() (*entity.ChoiceSection, error)
	FirstOrCreate() (*entity.ChoiceSection, error)
	FindByPage(offset int, limit int) (result []*entity.ChoiceSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChoiceSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c choiceSectionDo) Debug() IChoiceSectionDo {
	return c.withDO(c.DO.Debug())
}

func (c choiceSectionDo) WithContext(ctx context.Context) IChoiceSectionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c choiceSectionDo) ReadDB() IChoiceSectionDo {
	return c.Clauses(dbresolver.Read)
}

func (c choiceSectionDo) WriteDB() IChoiceSectionDo {
	return c.Clauses(dbresolver.Write)
}

func (c choiceSectionDo) Session(config *gorm.Session) IChoiceSectionDo {
	return c.withDO(c.DO.Session(config))
}

func (c choiceSectionDo) Clauses(conds ...clause.Expression) IChoiceSectionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c choiceSectionDo) Returning(value interface{}, columns ...string) IChoiceSectionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c choiceSectionDo) Not(conds ...gen.Condition) IChoiceSectionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c choiceSectionDo) Or(conds ...gen.Condition) IChoiceSectionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c choiceSectionDo) Select(conds ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c choiceSectionDo) Where(conds ...gen.Condition) IChoiceSectionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c choiceSectionDo) Order(conds ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c choiceSectionDo) Distinct(cols ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c choiceSectionDo) Omit(cols ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c choiceSectionDo) Join(table schema.Tabler, on ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c choiceSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c choiceSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c choiceSectionDo) Group(cols ...field.Expr) IChoiceSectionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c choiceSectionDo) Having(conds ...gen.Condition) IChoiceSectionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c choiceSectionDo) Limit(limit int) IChoiceSectionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c choiceSectionDo) Offset(offset int) IChoiceSectionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c choiceSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChoiceSectionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c choiceSectionDo) Unscoped() IChoiceSectionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c choiceSectionDo) Create(values ...*entity.ChoiceSection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c choiceSectionDo) CreateInBatches(values []*entity.ChoiceSection, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c choiceSectionDo) Save(values ...*entity.ChoiceSection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c choiceSectionDo) First() (*entity.ChoiceSection, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSection), nil
	}
}

func (c choiceSectionDo) Take() (*entity.ChoiceSection, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSection), nil
	}
}

func (c choiceSectionDo) Last() (*entity.ChoiceSection, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSection), nil
	}
}

func (c choiceSectionDo) Find() ([]*entity.ChoiceSection, error) {
	result, err := c.DO.Find()
	return result.([]*entity.ChoiceSection), err
}

func (c choiceSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ChoiceSection, err error) {
	buf := make([]*entity.ChoiceSection, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c choiceSectionDo) FindInBatches(result *[]*entity.ChoiceSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c choiceSectionDo) Attrs(attrs ...field.AssignExpr) IChoiceSectionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c choiceSectionDo) Assign(attrs ...field.AssignExpr) IChoiceSectionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c choiceSectionDo) Joins(fields ...field.RelationField) IChoiceSectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c choiceSectionDo) Preload(fields ...field.RelationField) IChoiceSectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c choiceSectionDo) FirstOrInit() (*entity.ChoiceSection, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSection), nil
	}
}

func (c choiceSectionDo) FirstOrCreate() (*entity.ChoiceSection, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSection), nil
	}
}

func (c choiceSectionDo) FindByPage(offset int, limit int) (result []*entity.ChoiceSection, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c choiceSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c choiceSectionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c choiceSectionDo) Delete(models ...*entity.ChoiceSection) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *choiceSectionDo) withDO(do gen.Dao) *choiceSectionDo {
	c.DO = *do.(*gen.DO)
	return c
}
