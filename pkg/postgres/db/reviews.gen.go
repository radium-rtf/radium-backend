// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newReview(db *gorm.DB, opts ...gen.DOOption) review {
	_review := review{}

	_review.reviewDo.UseDB(db, opts...)
	_review.reviewDo.UseModel(&entity.Review{})

	tableName := _review.reviewDo.TableName()
	_review.ALL = field.NewAsterisk(tableName)
	_review.AnswerId = field.NewField(tableName, "answer_id")
	_review.ReviewerId = field.NewField(tableName, "reviewer_id")
	_review.Score = field.NewFloat32(tableName, "score")
	_review.Comment = field.NewString(tableName, "comment")

	_review.fillFieldMap()

	return _review
}

type review struct {
	reviewDo reviewDo

	ALL        field.Asterisk
	AnswerId   field.Field
	ReviewerId field.Field
	Score      field.Float32
	Comment    field.String

	fieldMap map[string]field.Expr
}

func (r review) Table(newTableName string) *review {
	r.reviewDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r review) As(alias string) *review {
	r.reviewDo.DO = *(r.reviewDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *review) updateTableName(table string) *review {
	r.ALL = field.NewAsterisk(table)
	r.AnswerId = field.NewField(table, "answer_id")
	r.ReviewerId = field.NewField(table, "reviewer_id")
	r.Score = field.NewFloat32(table, "score")
	r.Comment = field.NewString(table, "comment")

	r.fillFieldMap()

	return r
}

func (r *review) WithContext(ctx context.Context) IReviewDo { return r.reviewDo.WithContext(ctx) }

func (r review) TableName() string { return r.reviewDo.TableName() }

func (r review) Alias() string { return r.reviewDo.Alias() }

func (r review) Columns(cols ...field.Expr) gen.Columns { return r.reviewDo.Columns(cols...) }

func (r *review) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *review) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["answer_id"] = r.AnswerId
	r.fieldMap["reviewer_id"] = r.ReviewerId
	r.fieldMap["score"] = r.Score
	r.fieldMap["comment"] = r.Comment
}

func (r review) clone(db *gorm.DB) review {
	r.reviewDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r review) replaceDB(db *gorm.DB) review {
	r.reviewDo.ReplaceDB(db)
	return r
}

type reviewDo struct{ gen.DO }

type IReviewDo interface {
	gen.SubQuery
	Debug() IReviewDo
	WithContext(ctx context.Context) IReviewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewDo
	WriteDB() IReviewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewDo
	Not(conds ...gen.Condition) IReviewDo
	Or(conds ...gen.Condition) IReviewDo
	Select(conds ...field.Expr) IReviewDo
	Where(conds ...gen.Condition) IReviewDo
	Order(conds ...field.Expr) IReviewDo
	Distinct(cols ...field.Expr) IReviewDo
	Omit(cols ...field.Expr) IReviewDo
	Join(table schema.Tabler, on ...field.Expr) IReviewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewDo
	Group(cols ...field.Expr) IReviewDo
	Having(conds ...gen.Condition) IReviewDo
	Limit(limit int) IReviewDo
	Offset(offset int) IReviewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewDo
	Unscoped() IReviewDo
	Create(values ...*entity.Review) error
	CreateInBatches(values []*entity.Review, batchSize int) error
	Save(values ...*entity.Review) error
	First() (*entity.Review, error)
	Take() (*entity.Review, error)
	Last() (*entity.Review, error)
	Find() ([]*entity.Review, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Review, err error)
	FindInBatches(result *[]*entity.Review, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Review) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewDo
	Assign(attrs ...field.AssignExpr) IReviewDo
	Joins(fields ...field.RelationField) IReviewDo
	Preload(fields ...field.RelationField) IReviewDo
	FirstOrInit() (*entity.Review, error)
	FirstOrCreate() (*entity.Review, error)
	FindByPage(offset int, limit int) (result []*entity.Review, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reviewDo) Debug() IReviewDo {
	return r.withDO(r.DO.Debug())
}

func (r reviewDo) WithContext(ctx context.Context) IReviewDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewDo) ReadDB() IReviewDo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewDo) WriteDB() IReviewDo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewDo) Session(config *gorm.Session) IReviewDo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewDo) Clauses(conds ...clause.Expression) IReviewDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewDo) Returning(value interface{}, columns ...string) IReviewDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewDo) Not(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewDo) Or(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewDo) Select(conds ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewDo) Where(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewDo) Order(conds ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewDo) Distinct(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewDo) Omit(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewDo) Join(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewDo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewDo) Group(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewDo) Having(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewDo) Limit(limit int) IReviewDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewDo) Offset(offset int) IReviewDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewDo) Unscoped() IReviewDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewDo) Create(values ...*entity.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewDo) CreateInBatches(values []*entity.Review, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewDo) Save(values ...*entity.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewDo) First() (*entity.Review, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Review), nil
	}
}

func (r reviewDo) Take() (*entity.Review, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Review), nil
	}
}

func (r reviewDo) Last() (*entity.Review, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Review), nil
	}
}

func (r reviewDo) Find() ([]*entity.Review, error) {
	result, err := r.DO.Find()
	return result.([]*entity.Review), err
}

func (r reviewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Review, err error) {
	buf := make([]*entity.Review, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewDo) FindInBatches(result *[]*entity.Review, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewDo) Attrs(attrs ...field.AssignExpr) IReviewDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewDo) Assign(attrs ...field.AssignExpr) IReviewDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewDo) Joins(fields ...field.RelationField) IReviewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewDo) Preload(fields ...field.RelationField) IReviewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewDo) FirstOrInit() (*entity.Review, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Review), nil
	}
}

func (r reviewDo) FirstOrCreate() (*entity.Review, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Review), nil
	}
}

func (r reviewDo) FindByPage(offset int, limit int) (result []*entity.Review, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewDo) Delete(models ...*entity.Review) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewDo) withDO(do gen.Dao) *reviewDo {
	r.DO = *do.(*gen.DO)
	return r
}
