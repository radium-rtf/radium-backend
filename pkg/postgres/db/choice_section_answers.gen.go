// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newChoiceSectionAnswer(db *gorm.DB, opts ...gen.DOOption) choiceSectionAnswer {
	_choiceSectionAnswer := choiceSectionAnswer{}

	_choiceSectionAnswer.choiceSectionAnswerDo.UseDB(db, opts...)
	_choiceSectionAnswer.choiceSectionAnswerDo.UseModel(&entity.ChoiceSectionAnswer{})

	tableName := _choiceSectionAnswer.choiceSectionAnswerDo.TableName()
	_choiceSectionAnswer.ALL = field.NewAsterisk(tableName)
	_choiceSectionAnswer.Id = field.NewField(tableName, "id")
	_choiceSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_choiceSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")
	_choiceSectionAnswer.Answer = field.NewString(tableName, "answer")

	_choiceSectionAnswer.fillFieldMap()

	return _choiceSectionAnswer
}

type choiceSectionAnswer struct {
	choiceSectionAnswerDo choiceSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	OwnerID   field.Field
	OwnerType field.String
	Answer    field.String

	fieldMap map[string]field.Expr
}

func (c choiceSectionAnswer) Table(newTableName string) *choiceSectionAnswer {
	c.choiceSectionAnswerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c choiceSectionAnswer) As(alias string) *choiceSectionAnswer {
	c.choiceSectionAnswerDo.DO = *(c.choiceSectionAnswerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *choiceSectionAnswer) updateTableName(table string) *choiceSectionAnswer {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewField(table, "id")
	c.OwnerID = field.NewField(table, "owner_id")
	c.OwnerType = field.NewString(table, "owner_type")
	c.Answer = field.NewString(table, "answer")

	c.fillFieldMap()

	return c
}

func (c *choiceSectionAnswer) WithContext(ctx context.Context) IChoiceSectionAnswerDo {
	return c.choiceSectionAnswerDo.WithContext(ctx)
}

func (c choiceSectionAnswer) TableName() string { return c.choiceSectionAnswerDo.TableName() }

func (c choiceSectionAnswer) Alias() string { return c.choiceSectionAnswerDo.Alias() }

func (c *choiceSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *choiceSectionAnswer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.Id
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["owner_type"] = c.OwnerType
	c.fieldMap["answer"] = c.Answer
}

func (c choiceSectionAnswer) clone(db *gorm.DB) choiceSectionAnswer {
	c.choiceSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c choiceSectionAnswer) replaceDB(db *gorm.DB) choiceSectionAnswer {
	c.choiceSectionAnswerDo.ReplaceDB(db)
	return c
}

type choiceSectionAnswerDo struct{ gen.DO }

type IChoiceSectionAnswerDo interface {
	gen.SubQuery
	Debug() IChoiceSectionAnswerDo
	WithContext(ctx context.Context) IChoiceSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChoiceSectionAnswerDo
	WriteDB() IChoiceSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChoiceSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChoiceSectionAnswerDo
	Not(conds ...gen.Condition) IChoiceSectionAnswerDo
	Or(conds ...gen.Condition) IChoiceSectionAnswerDo
	Select(conds ...field.Expr) IChoiceSectionAnswerDo
	Where(conds ...gen.Condition) IChoiceSectionAnswerDo
	Order(conds ...field.Expr) IChoiceSectionAnswerDo
	Distinct(cols ...field.Expr) IChoiceSectionAnswerDo
	Omit(cols ...field.Expr) IChoiceSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo
	Group(cols ...field.Expr) IChoiceSectionAnswerDo
	Having(conds ...gen.Condition) IChoiceSectionAnswerDo
	Limit(limit int) IChoiceSectionAnswerDo
	Offset(offset int) IChoiceSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChoiceSectionAnswerDo
	Unscoped() IChoiceSectionAnswerDo
	Create(values ...*entity.ChoiceSectionAnswer) error
	CreateInBatches(values []*entity.ChoiceSectionAnswer, batchSize int) error
	Save(values ...*entity.ChoiceSectionAnswer) error
	First() (*entity.ChoiceSectionAnswer, error)
	Take() (*entity.ChoiceSectionAnswer, error)
	Last() (*entity.ChoiceSectionAnswer, error)
	Find() ([]*entity.ChoiceSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ChoiceSectionAnswer, err error)
	FindInBatches(result *[]*entity.ChoiceSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ChoiceSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChoiceSectionAnswerDo
	Assign(attrs ...field.AssignExpr) IChoiceSectionAnswerDo
	Joins(fields ...field.RelationField) IChoiceSectionAnswerDo
	Preload(fields ...field.RelationField) IChoiceSectionAnswerDo
	FirstOrInit() (*entity.ChoiceSectionAnswer, error)
	FirstOrCreate() (*entity.ChoiceSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.ChoiceSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChoiceSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c choiceSectionAnswerDo) Debug() IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Debug())
}

func (c choiceSectionAnswerDo) WithContext(ctx context.Context) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c choiceSectionAnswerDo) ReadDB() IChoiceSectionAnswerDo {
	return c.Clauses(dbresolver.Read)
}

func (c choiceSectionAnswerDo) WriteDB() IChoiceSectionAnswerDo {
	return c.Clauses(dbresolver.Write)
}

func (c choiceSectionAnswerDo) Session(config *gorm.Session) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Session(config))
}

func (c choiceSectionAnswerDo) Clauses(conds ...clause.Expression) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c choiceSectionAnswerDo) Returning(value interface{}, columns ...string) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c choiceSectionAnswerDo) Not(conds ...gen.Condition) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c choiceSectionAnswerDo) Or(conds ...gen.Condition) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c choiceSectionAnswerDo) Select(conds ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c choiceSectionAnswerDo) Where(conds ...gen.Condition) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c choiceSectionAnswerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IChoiceSectionAnswerDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c choiceSectionAnswerDo) Order(conds ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c choiceSectionAnswerDo) Distinct(cols ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c choiceSectionAnswerDo) Omit(cols ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c choiceSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c choiceSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c choiceSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c choiceSectionAnswerDo) Group(cols ...field.Expr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c choiceSectionAnswerDo) Having(conds ...gen.Condition) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c choiceSectionAnswerDo) Limit(limit int) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c choiceSectionAnswerDo) Offset(offset int) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c choiceSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c choiceSectionAnswerDo) Unscoped() IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c choiceSectionAnswerDo) Create(values ...*entity.ChoiceSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c choiceSectionAnswerDo) CreateInBatches(values []*entity.ChoiceSectionAnswer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c choiceSectionAnswerDo) Save(values ...*entity.ChoiceSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c choiceSectionAnswerDo) First() (*entity.ChoiceSectionAnswer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSectionAnswer), nil
	}
}

func (c choiceSectionAnswerDo) Take() (*entity.ChoiceSectionAnswer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSectionAnswer), nil
	}
}

func (c choiceSectionAnswerDo) Last() (*entity.ChoiceSectionAnswer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSectionAnswer), nil
	}
}

func (c choiceSectionAnswerDo) Find() ([]*entity.ChoiceSectionAnswer, error) {
	result, err := c.DO.Find()
	return result.([]*entity.ChoiceSectionAnswer), err
}

func (c choiceSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ChoiceSectionAnswer, err error) {
	buf := make([]*entity.ChoiceSectionAnswer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c choiceSectionAnswerDo) FindInBatches(result *[]*entity.ChoiceSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c choiceSectionAnswerDo) Attrs(attrs ...field.AssignExpr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c choiceSectionAnswerDo) Assign(attrs ...field.AssignExpr) IChoiceSectionAnswerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c choiceSectionAnswerDo) Joins(fields ...field.RelationField) IChoiceSectionAnswerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c choiceSectionAnswerDo) Preload(fields ...field.RelationField) IChoiceSectionAnswerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c choiceSectionAnswerDo) FirstOrInit() (*entity.ChoiceSectionAnswer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSectionAnswer), nil
	}
}

func (c choiceSectionAnswerDo) FirstOrCreate() (*entity.ChoiceSectionAnswer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ChoiceSectionAnswer), nil
	}
}

func (c choiceSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.ChoiceSectionAnswer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c choiceSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c choiceSectionAnswerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c choiceSectionAnswerDo) Delete(models ...*entity.ChoiceSectionAnswer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *choiceSectionAnswerDo) withDO(do gen.Dao) *choiceSectionAnswerDo {
	c.DO = *do.(*gen.DO)
	return c
}
