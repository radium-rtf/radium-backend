// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newMultiChoiceSection(db *gorm.DB, opts ...gen.DOOption) multiChoiceSection {
	_multiChoiceSection := multiChoiceSection{}

	_multiChoiceSection.multiChoiceSectionDo.UseDB(db, opts...)
	_multiChoiceSection.multiChoiceSectionDo.UseModel(&entity.MultiChoiceSection{})

	tableName := _multiChoiceSection.multiChoiceSectionDo.TableName()
	_multiChoiceSection.ALL = field.NewAsterisk(tableName)
	_multiChoiceSection.Id = field.NewField(tableName, "id")
	_multiChoiceSection.CreatedAt = field.NewTime(tableName, "created_at")
	_multiChoiceSection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_multiChoiceSection.DeletedAt = field.NewField(tableName, "deleted_at")
	_multiChoiceSection.MaxScore = field.NewUint(tableName, "max_score")
	_multiChoiceSection.Question = field.NewString(tableName, "question")
	_multiChoiceSection.Answer = field.NewField(tableName, "answer")
	_multiChoiceSection.Variants = field.NewField(tableName, "variants")
	_multiChoiceSection.OwnerID = field.NewField(tableName, "owner_id")
	_multiChoiceSection.OwnerType = field.NewString(tableName, "owner_type")

	_multiChoiceSection.fillFieldMap()

	return _multiChoiceSection
}

type multiChoiceSection struct {
	multiChoiceSectionDo multiChoiceSectionDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	MaxScore  field.Uint
	Question  field.String
	Answer    field.Field
	Variants  field.Field
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (m multiChoiceSection) Table(newTableName string) *multiChoiceSection {
	m.multiChoiceSectionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multiChoiceSection) As(alias string) *multiChoiceSection {
	m.multiChoiceSectionDo.DO = *(m.multiChoiceSectionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multiChoiceSection) updateTableName(table string) *multiChoiceSection {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewField(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MaxScore = field.NewUint(table, "max_score")
	m.Question = field.NewString(table, "question")
	m.Answer = field.NewField(table, "answer")
	m.Variants = field.NewField(table, "variants")
	m.OwnerID = field.NewField(table, "owner_id")
	m.OwnerType = field.NewString(table, "owner_type")

	m.fillFieldMap()

	return m
}

func (m *multiChoiceSection) WithContext(ctx context.Context) IMultiChoiceSectionDo {
	return m.multiChoiceSectionDo.WithContext(ctx)
}

func (m multiChoiceSection) TableName() string { return m.multiChoiceSectionDo.TableName() }

func (m multiChoiceSection) Alias() string { return m.multiChoiceSectionDo.Alias() }

func (m *multiChoiceSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multiChoiceSection) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.Id
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["max_score"] = m.MaxScore
	m.fieldMap["question"] = m.Question
	m.fieldMap["answer"] = m.Answer
	m.fieldMap["variants"] = m.Variants
	m.fieldMap["owner_id"] = m.OwnerID
	m.fieldMap["owner_type"] = m.OwnerType
}

func (m multiChoiceSection) clone(db *gorm.DB) multiChoiceSection {
	m.multiChoiceSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multiChoiceSection) replaceDB(db *gorm.DB) multiChoiceSection {
	m.multiChoiceSectionDo.ReplaceDB(db)
	return m
}

type multiChoiceSectionDo struct{ gen.DO }

type IMultiChoiceSectionDo interface {
	gen.SubQuery
	Debug() IMultiChoiceSectionDo
	WithContext(ctx context.Context) IMultiChoiceSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMultiChoiceSectionDo
	WriteDB() IMultiChoiceSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMultiChoiceSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMultiChoiceSectionDo
	Not(conds ...gen.Condition) IMultiChoiceSectionDo
	Or(conds ...gen.Condition) IMultiChoiceSectionDo
	Select(conds ...field.Expr) IMultiChoiceSectionDo
	Where(conds ...gen.Condition) IMultiChoiceSectionDo
	Order(conds ...field.Expr) IMultiChoiceSectionDo
	Distinct(cols ...field.Expr) IMultiChoiceSectionDo
	Omit(cols ...field.Expr) IMultiChoiceSectionDo
	Join(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo
	Group(cols ...field.Expr) IMultiChoiceSectionDo
	Having(conds ...gen.Condition) IMultiChoiceSectionDo
	Limit(limit int) IMultiChoiceSectionDo
	Offset(offset int) IMultiChoiceSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMultiChoiceSectionDo
	Unscoped() IMultiChoiceSectionDo
	Create(values ...*entity.MultiChoiceSection) error
	CreateInBatches(values []*entity.MultiChoiceSection, batchSize int) error
	Save(values ...*entity.MultiChoiceSection) error
	First() (*entity.MultiChoiceSection, error)
	Take() (*entity.MultiChoiceSection, error)
	Last() (*entity.MultiChoiceSection, error)
	Find() ([]*entity.MultiChoiceSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.MultiChoiceSection, err error)
	FindInBatches(result *[]*entity.MultiChoiceSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.MultiChoiceSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMultiChoiceSectionDo
	Assign(attrs ...field.AssignExpr) IMultiChoiceSectionDo
	Joins(fields ...field.RelationField) IMultiChoiceSectionDo
	Preload(fields ...field.RelationField) IMultiChoiceSectionDo
	FirstOrInit() (*entity.MultiChoiceSection, error)
	FirstOrCreate() (*entity.MultiChoiceSection, error)
	FindByPage(offset int, limit int) (result []*entity.MultiChoiceSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMultiChoiceSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m multiChoiceSectionDo) Debug() IMultiChoiceSectionDo {
	return m.withDO(m.DO.Debug())
}

func (m multiChoiceSectionDo) WithContext(ctx context.Context) IMultiChoiceSectionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multiChoiceSectionDo) ReadDB() IMultiChoiceSectionDo {
	return m.Clauses(dbresolver.Read)
}

func (m multiChoiceSectionDo) WriteDB() IMultiChoiceSectionDo {
	return m.Clauses(dbresolver.Write)
}

func (m multiChoiceSectionDo) Session(config *gorm.Session) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Session(config))
}

func (m multiChoiceSectionDo) Clauses(conds ...clause.Expression) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multiChoiceSectionDo) Returning(value interface{}, columns ...string) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multiChoiceSectionDo) Not(conds ...gen.Condition) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multiChoiceSectionDo) Or(conds ...gen.Condition) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multiChoiceSectionDo) Select(conds ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multiChoiceSectionDo) Where(conds ...gen.Condition) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multiChoiceSectionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMultiChoiceSectionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m multiChoiceSectionDo) Order(conds ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multiChoiceSectionDo) Distinct(cols ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multiChoiceSectionDo) Omit(cols ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multiChoiceSectionDo) Join(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multiChoiceSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multiChoiceSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multiChoiceSectionDo) Group(cols ...field.Expr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multiChoiceSectionDo) Having(conds ...gen.Condition) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multiChoiceSectionDo) Limit(limit int) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multiChoiceSectionDo) Offset(offset int) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multiChoiceSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multiChoiceSectionDo) Unscoped() IMultiChoiceSectionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multiChoiceSectionDo) Create(values ...*entity.MultiChoiceSection) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multiChoiceSectionDo) CreateInBatches(values []*entity.MultiChoiceSection, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multiChoiceSectionDo) Save(values ...*entity.MultiChoiceSection) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multiChoiceSectionDo) First() (*entity.MultiChoiceSection, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultiChoiceSection), nil
	}
}

func (m multiChoiceSectionDo) Take() (*entity.MultiChoiceSection, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultiChoiceSection), nil
	}
}

func (m multiChoiceSectionDo) Last() (*entity.MultiChoiceSection, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultiChoiceSection), nil
	}
}

func (m multiChoiceSectionDo) Find() ([]*entity.MultiChoiceSection, error) {
	result, err := m.DO.Find()
	return result.([]*entity.MultiChoiceSection), err
}

func (m multiChoiceSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.MultiChoiceSection, err error) {
	buf := make([]*entity.MultiChoiceSection, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multiChoiceSectionDo) FindInBatches(result *[]*entity.MultiChoiceSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multiChoiceSectionDo) Attrs(attrs ...field.AssignExpr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multiChoiceSectionDo) Assign(attrs ...field.AssignExpr) IMultiChoiceSectionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multiChoiceSectionDo) Joins(fields ...field.RelationField) IMultiChoiceSectionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multiChoiceSectionDo) Preload(fields ...field.RelationField) IMultiChoiceSectionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multiChoiceSectionDo) FirstOrInit() (*entity.MultiChoiceSection, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultiChoiceSection), nil
	}
}

func (m multiChoiceSectionDo) FirstOrCreate() (*entity.MultiChoiceSection, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultiChoiceSection), nil
	}
}

func (m multiChoiceSectionDo) FindByPage(offset int, limit int) (result []*entity.MultiChoiceSection, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multiChoiceSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multiChoiceSectionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multiChoiceSectionDo) Delete(models ...*entity.MultiChoiceSection) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multiChoiceSectionDo) withDO(do gen.Dao) *multiChoiceSectionDo {
	m.DO = *do.(*gen.DO)
	return m
}
