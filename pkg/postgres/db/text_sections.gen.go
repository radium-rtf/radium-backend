// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newTextSection(db *gorm.DB, opts ...gen.DOOption) textSection {
	_textSection := textSection{}

	_textSection.textSectionDo.UseDB(db, opts...)
	_textSection.textSectionDo.UseModel(&entity.TextSection{})

	tableName := _textSection.textSectionDo.TableName()
	_textSection.ALL = field.NewAsterisk(tableName)
	_textSection.ID = field.NewField(tableName, "id")
	_textSection.Content = field.NewString(tableName, "content")
	_textSection.OwnerID = field.NewField(tableName, "owner_id")
	_textSection.OwnerType = field.NewString(tableName, "owner_type")

	_textSection.fillFieldMap()

	return _textSection
}

type textSection struct {
	textSectionDo textSectionDo

	ALL       field.Asterisk
	ID        field.Field
	Content   field.String
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (t textSection) Table(newTableName string) *textSection {
	t.textSectionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t textSection) As(alias string) *textSection {
	t.textSectionDo.DO = *(t.textSectionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *textSection) updateTableName(table string) *textSection {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewField(table, "id")
	t.Content = field.NewString(table, "content")
	t.OwnerID = field.NewField(table, "owner_id")
	t.OwnerType = field.NewString(table, "owner_type")

	t.fillFieldMap()

	return t
}

func (t *textSection) WithContext(ctx context.Context) ITextSectionDo {
	return t.textSectionDo.WithContext(ctx)
}

func (t textSection) TableName() string { return t.textSectionDo.TableName() }

func (t textSection) Alias() string { return t.textSectionDo.Alias() }

func (t *textSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *textSection) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["content"] = t.Content
	t.fieldMap["owner_id"] = t.OwnerID
	t.fieldMap["owner_type"] = t.OwnerType
}

func (t textSection) clone(db *gorm.DB) textSection {
	t.textSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t textSection) replaceDB(db *gorm.DB) textSection {
	t.textSectionDo.ReplaceDB(db)
	return t
}

type textSectionDo struct{ gen.DO }

type ITextSectionDo interface {
	gen.SubQuery
	Debug() ITextSectionDo
	WithContext(ctx context.Context) ITextSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITextSectionDo
	WriteDB() ITextSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITextSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITextSectionDo
	Not(conds ...gen.Condition) ITextSectionDo
	Or(conds ...gen.Condition) ITextSectionDo
	Select(conds ...field.Expr) ITextSectionDo
	Where(conds ...gen.Condition) ITextSectionDo
	Order(conds ...field.Expr) ITextSectionDo
	Distinct(cols ...field.Expr) ITextSectionDo
	Omit(cols ...field.Expr) ITextSectionDo
	Join(table schema.Tabler, on ...field.Expr) ITextSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITextSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITextSectionDo
	Group(cols ...field.Expr) ITextSectionDo
	Having(conds ...gen.Condition) ITextSectionDo
	Limit(limit int) ITextSectionDo
	Offset(offset int) ITextSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITextSectionDo
	Unscoped() ITextSectionDo
	Create(values ...*entity.TextSection) error
	CreateInBatches(values []*entity.TextSection, batchSize int) error
	Save(values ...*entity.TextSection) error
	First() (*entity.TextSection, error)
	Take() (*entity.TextSection, error)
	Last() (*entity.TextSection, error)
	Find() ([]*entity.TextSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TextSection, err error)
	FindInBatches(result *[]*entity.TextSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.TextSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITextSectionDo
	Assign(attrs ...field.AssignExpr) ITextSectionDo
	Joins(fields ...field.RelationField) ITextSectionDo
	Preload(fields ...field.RelationField) ITextSectionDo
	FirstOrInit() (*entity.TextSection, error)
	FirstOrCreate() (*entity.TextSection, error)
	FindByPage(offset int, limit int) (result []*entity.TextSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITextSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t textSectionDo) Debug() ITextSectionDo {
	return t.withDO(t.DO.Debug())
}

func (t textSectionDo) WithContext(ctx context.Context) ITextSectionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t textSectionDo) ReadDB() ITextSectionDo {
	return t.Clauses(dbresolver.Read)
}

func (t textSectionDo) WriteDB() ITextSectionDo {
	return t.Clauses(dbresolver.Write)
}

func (t textSectionDo) Session(config *gorm.Session) ITextSectionDo {
	return t.withDO(t.DO.Session(config))
}

func (t textSectionDo) Clauses(conds ...clause.Expression) ITextSectionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t textSectionDo) Returning(value interface{}, columns ...string) ITextSectionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t textSectionDo) Not(conds ...gen.Condition) ITextSectionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t textSectionDo) Or(conds ...gen.Condition) ITextSectionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t textSectionDo) Select(conds ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t textSectionDo) Where(conds ...gen.Condition) ITextSectionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t textSectionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITextSectionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t textSectionDo) Order(conds ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t textSectionDo) Distinct(cols ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t textSectionDo) Omit(cols ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t textSectionDo) Join(table schema.Tabler, on ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t textSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t textSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t textSectionDo) Group(cols ...field.Expr) ITextSectionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t textSectionDo) Having(conds ...gen.Condition) ITextSectionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t textSectionDo) Limit(limit int) ITextSectionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t textSectionDo) Offset(offset int) ITextSectionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t textSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITextSectionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t textSectionDo) Unscoped() ITextSectionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t textSectionDo) Create(values ...*entity.TextSection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t textSectionDo) CreateInBatches(values []*entity.TextSection, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t textSectionDo) Save(values ...*entity.TextSection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t textSectionDo) First() (*entity.TextSection, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TextSection), nil
	}
}

func (t textSectionDo) Take() (*entity.TextSection, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TextSection), nil
	}
}

func (t textSectionDo) Last() (*entity.TextSection, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TextSection), nil
	}
}

func (t textSectionDo) Find() ([]*entity.TextSection, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TextSection), err
}

func (t textSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TextSection, err error) {
	buf := make([]*entity.TextSection, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t textSectionDo) FindInBatches(result *[]*entity.TextSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t textSectionDo) Attrs(attrs ...field.AssignExpr) ITextSectionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t textSectionDo) Assign(attrs ...field.AssignExpr) ITextSectionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t textSectionDo) Joins(fields ...field.RelationField) ITextSectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t textSectionDo) Preload(fields ...field.RelationField) ITextSectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t textSectionDo) FirstOrInit() (*entity.TextSection, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TextSection), nil
	}
}

func (t textSectionDo) FirstOrCreate() (*entity.TextSection, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TextSection), nil
	}
}

func (t textSectionDo) FindByPage(offset int, limit int) (result []*entity.TextSection, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t textSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t textSectionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t textSectionDo) Delete(models ...*entity.TextSection) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *textSectionDo) withDO(do gen.Dao) *textSectionDo {
	t.DO = *do.(*gen.DO)
	return t
}
