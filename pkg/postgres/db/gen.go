// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q       = new(Query)
	Course  *course
	Group   *group
	Link    *link
	Module  *module
	Page    *page
	Session *session
	User    *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Course = &Q.Course
	Group = &Q.Group
	Link = &Q.Link
	Module = &Q.Module
	Page = &Q.Page
	Session = &Q.Session
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:      db,
		Course:  newCourse(db, opts...),
		Group:   newGroup(db, opts...),
		Link:    newLink(db, opts...),
		Module:  newModule(db, opts...),
		Page:    newPage(db, opts...),
		Session: newSession(db, opts...),
		User:    newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Course  course
	Group   group
	Link    link
	Module  module
	Page    page
	Session session
	User    user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Course:  q.Course.clone(db),
		Group:   q.Group.clone(db),
		Link:    q.Link.clone(db),
		Module:  q.Module.clone(db),
		Page:    q.Page.clone(db),
		Session: q.Session.clone(db),
		User:    q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Course:  q.Course.replaceDB(db),
		Group:   q.Group.replaceDB(db),
		Link:    q.Link.replaceDB(db),
		Module:  q.Module.replaceDB(db),
		Page:    q.Page.replaceDB(db),
		Session: q.Session.replaceDB(db),
		User:    q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Course  *courseDo
	Group   *groupDo
	Link    *linkDo
	Module  *moduleDo
	Page    *pageDo
	Session *sessionDo
	User    *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Course:  q.Course.WithContext(ctx),
		Group:   q.Group.WithContext(ctx),
		Link:    q.Link.WithContext(ctx),
		Module:  q.Module.WithContext(ctx),
		Page:    q.Page.WithContext(ctx),
		Session: q.Session.WithContext(ctx),
		User:    q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
