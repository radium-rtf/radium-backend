// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newCodeSectionAnswer(db *gorm.DB, opts ...gen.DOOption) codeSectionAnswer {
	_codeSectionAnswer := codeSectionAnswer{}

	_codeSectionAnswer.codeSectionAnswerDo.UseDB(db, opts...)
	_codeSectionAnswer.codeSectionAnswerDo.UseModel(&entity.CodeSectionAnswer{})

	tableName := _codeSectionAnswer.codeSectionAnswerDo.TableName()
	_codeSectionAnswer.ALL = field.NewAsterisk(tableName)
	_codeSectionAnswer.Id = field.NewField(tableName, "id")
	_codeSectionAnswer.CreatedAt = field.NewTime(tableName, "created_at")
	_codeSectionAnswer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeSectionAnswer.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_codeSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")
	_codeSectionAnswer.Answer = field.NewString(tableName, "answer")
	_codeSectionAnswer.Language = field.NewString(tableName, "language")
	_codeSectionAnswer.Review = codeSectionAnswerHasOneReview{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Review", "entity.CodeReview"),
	}

	_codeSectionAnswer.fillFieldMap()

	return _codeSectionAnswer
}

type codeSectionAnswer struct {
	codeSectionAnswerDo codeSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OwnerID   field.Field
	OwnerType field.String
	Answer    field.String
	Language  field.String
	Review    codeSectionAnswerHasOneReview

	fieldMap map[string]field.Expr
}

func (c codeSectionAnswer) Table(newTableName string) *codeSectionAnswer {
	c.codeSectionAnswerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeSectionAnswer) As(alias string) *codeSectionAnswer {
	c.codeSectionAnswerDo.DO = *(c.codeSectionAnswerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeSectionAnswer) updateTableName(table string) *codeSectionAnswer {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.OwnerID = field.NewField(table, "owner_id")
	c.OwnerType = field.NewString(table, "owner_type")
	c.Answer = field.NewString(table, "answer")
	c.Language = field.NewString(table, "language")

	c.fillFieldMap()

	return c
}

func (c *codeSectionAnswer) WithContext(ctx context.Context) ICodeSectionAnswerDo {
	return c.codeSectionAnswerDo.WithContext(ctx)
}

func (c codeSectionAnswer) TableName() string { return c.codeSectionAnswerDo.TableName() }

func (c codeSectionAnswer) Alias() string { return c.codeSectionAnswerDo.Alias() }

func (c *codeSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeSectionAnswer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.Id
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["owner_type"] = c.OwnerType
	c.fieldMap["answer"] = c.Answer
	c.fieldMap["language"] = c.Language

}

func (c codeSectionAnswer) clone(db *gorm.DB) codeSectionAnswer {
	c.codeSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeSectionAnswer) replaceDB(db *gorm.DB) codeSectionAnswer {
	c.codeSectionAnswerDo.ReplaceDB(db)
	return c
}

type codeSectionAnswerHasOneReview struct {
	db *gorm.DB

	field.RelationField
}

func (a codeSectionAnswerHasOneReview) Where(conds ...field.Expr) *codeSectionAnswerHasOneReview {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a codeSectionAnswerHasOneReview) WithContext(ctx context.Context) *codeSectionAnswerHasOneReview {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a codeSectionAnswerHasOneReview) Session(session *gorm.Session) *codeSectionAnswerHasOneReview {
	a.db = a.db.Session(session)
	return &a
}

func (a codeSectionAnswerHasOneReview) Model(m *entity.CodeSectionAnswer) *codeSectionAnswerHasOneReviewTx {
	return &codeSectionAnswerHasOneReviewTx{a.db.Model(m).Association(a.Name())}
}

type codeSectionAnswerHasOneReviewTx struct{ tx *gorm.Association }

func (a codeSectionAnswerHasOneReviewTx) Find() (result *entity.CodeReview, err error) {
	return result, a.tx.Find(&result)
}

func (a codeSectionAnswerHasOneReviewTx) Append(values ...*entity.CodeReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a codeSectionAnswerHasOneReviewTx) Replace(values ...*entity.CodeReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a codeSectionAnswerHasOneReviewTx) Delete(values ...*entity.CodeReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a codeSectionAnswerHasOneReviewTx) Clear() error {
	return a.tx.Clear()
}

func (a codeSectionAnswerHasOneReviewTx) Count() int64 {
	return a.tx.Count()
}

type codeSectionAnswerDo struct{ gen.DO }

type ICodeSectionAnswerDo interface {
	gen.SubQuery
	Debug() ICodeSectionAnswerDo
	WithContext(ctx context.Context) ICodeSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICodeSectionAnswerDo
	WriteDB() ICodeSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICodeSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICodeSectionAnswerDo
	Not(conds ...gen.Condition) ICodeSectionAnswerDo
	Or(conds ...gen.Condition) ICodeSectionAnswerDo
	Select(conds ...field.Expr) ICodeSectionAnswerDo
	Where(conds ...gen.Condition) ICodeSectionAnswerDo
	Order(conds ...field.Expr) ICodeSectionAnswerDo
	Distinct(cols ...field.Expr) ICodeSectionAnswerDo
	Omit(cols ...field.Expr) ICodeSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo
	Group(cols ...field.Expr) ICodeSectionAnswerDo
	Having(conds ...gen.Condition) ICodeSectionAnswerDo
	Limit(limit int) ICodeSectionAnswerDo
	Offset(offset int) ICodeSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeSectionAnswerDo
	Unscoped() ICodeSectionAnswerDo
	Create(values ...*entity.CodeSectionAnswer) error
	CreateInBatches(values []*entity.CodeSectionAnswer, batchSize int) error
	Save(values ...*entity.CodeSectionAnswer) error
	First() (*entity.CodeSectionAnswer, error)
	Take() (*entity.CodeSectionAnswer, error)
	Last() (*entity.CodeSectionAnswer, error)
	Find() ([]*entity.CodeSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeSectionAnswer, err error)
	FindInBatches(result *[]*entity.CodeSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CodeSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICodeSectionAnswerDo
	Assign(attrs ...field.AssignExpr) ICodeSectionAnswerDo
	Joins(fields ...field.RelationField) ICodeSectionAnswerDo
	Preload(fields ...field.RelationField) ICodeSectionAnswerDo
	FirstOrInit() (*entity.CodeSectionAnswer, error)
	FirstOrCreate() (*entity.CodeSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.CodeSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICodeSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c codeSectionAnswerDo) Debug() ICodeSectionAnswerDo {
	return c.withDO(c.DO.Debug())
}

func (c codeSectionAnswerDo) WithContext(ctx context.Context) ICodeSectionAnswerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeSectionAnswerDo) ReadDB() ICodeSectionAnswerDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeSectionAnswerDo) WriteDB() ICodeSectionAnswerDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeSectionAnswerDo) Session(config *gorm.Session) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeSectionAnswerDo) Clauses(conds ...clause.Expression) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeSectionAnswerDo) Returning(value interface{}, columns ...string) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeSectionAnswerDo) Not(conds ...gen.Condition) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeSectionAnswerDo) Or(conds ...gen.Condition) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeSectionAnswerDo) Select(conds ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeSectionAnswerDo) Where(conds ...gen.Condition) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeSectionAnswerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICodeSectionAnswerDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c codeSectionAnswerDo) Order(conds ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeSectionAnswerDo) Distinct(cols ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeSectionAnswerDo) Omit(cols ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeSectionAnswerDo) Group(cols ...field.Expr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeSectionAnswerDo) Having(conds ...gen.Condition) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeSectionAnswerDo) Limit(limit int) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeSectionAnswerDo) Offset(offset int) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeSectionAnswerDo) Unscoped() ICodeSectionAnswerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeSectionAnswerDo) Create(values ...*entity.CodeSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeSectionAnswerDo) CreateInBatches(values []*entity.CodeSectionAnswer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeSectionAnswerDo) Save(values ...*entity.CodeSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeSectionAnswerDo) First() (*entity.CodeSectionAnswer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSectionAnswer), nil
	}
}

func (c codeSectionAnswerDo) Take() (*entity.CodeSectionAnswer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSectionAnswer), nil
	}
}

func (c codeSectionAnswerDo) Last() (*entity.CodeSectionAnswer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSectionAnswer), nil
	}
}

func (c codeSectionAnswerDo) Find() ([]*entity.CodeSectionAnswer, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CodeSectionAnswer), err
}

func (c codeSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeSectionAnswer, err error) {
	buf := make([]*entity.CodeSectionAnswer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeSectionAnswerDo) FindInBatches(result *[]*entity.CodeSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeSectionAnswerDo) Attrs(attrs ...field.AssignExpr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeSectionAnswerDo) Assign(attrs ...field.AssignExpr) ICodeSectionAnswerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeSectionAnswerDo) Joins(fields ...field.RelationField) ICodeSectionAnswerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeSectionAnswerDo) Preload(fields ...field.RelationField) ICodeSectionAnswerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeSectionAnswerDo) FirstOrInit() (*entity.CodeSectionAnswer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSectionAnswer), nil
	}
}

func (c codeSectionAnswerDo) FirstOrCreate() (*entity.CodeSectionAnswer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSectionAnswer), nil
	}
}

func (c codeSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.CodeSectionAnswer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeSectionAnswerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeSectionAnswerDo) Delete(models ...*entity.CodeSectionAnswer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeSectionAnswerDo) withDO(do gen.Dao) *codeSectionAnswerDo {
	c.DO = *do.(*gen.DO)
	return c
}
