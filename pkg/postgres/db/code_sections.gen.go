// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newCodeSection(db *gorm.DB, opts ...gen.DOOption) codeSection {
	_codeSection := codeSection{}

	_codeSection.codeSectionDo.UseDB(db, opts...)
	_codeSection.codeSectionDo.UseModel(&entity.CodeSection{})

	tableName := _codeSection.codeSectionDo.TableName()
	_codeSection.ALL = field.NewAsterisk(tableName)
	_codeSection.Id = field.NewField(tableName, "id")
	_codeSection.CreatedAt = field.NewTime(tableName, "created_at")
	_codeSection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeSection.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeSection.Question = field.NewString(tableName, "question")
	_codeSection.OwnerID = field.NewField(tableName, "owner_id")
	_codeSection.OwnerType = field.NewString(tableName, "owner_type")

	_codeSection.fillFieldMap()

	return _codeSection
}

type codeSection struct {
	codeSectionDo codeSectionDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Question  field.String
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (c codeSection) Table(newTableName string) *codeSection {
	c.codeSectionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeSection) As(alias string) *codeSection {
	c.codeSectionDo.DO = *(c.codeSectionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeSection) updateTableName(table string) *codeSection {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Question = field.NewString(table, "question")
	c.OwnerID = field.NewField(table, "owner_id")
	c.OwnerType = field.NewString(table, "owner_type")

	c.fillFieldMap()

	return c
}

func (c *codeSection) WithContext(ctx context.Context) ICodeSectionDo {
	return c.codeSectionDo.WithContext(ctx)
}

func (c codeSection) TableName() string { return c.codeSectionDo.TableName() }

func (c codeSection) Alias() string { return c.codeSectionDo.Alias() }

func (c codeSection) Columns(cols ...field.Expr) gen.Columns { return c.codeSectionDo.Columns(cols...) }

func (c *codeSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeSection) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.Id
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["question"] = c.Question
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["owner_type"] = c.OwnerType
}

func (c codeSection) clone(db *gorm.DB) codeSection {
	c.codeSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeSection) replaceDB(db *gorm.DB) codeSection {
	c.codeSectionDo.ReplaceDB(db)
	return c
}

type codeSectionDo struct{ gen.DO }

type ICodeSectionDo interface {
	gen.SubQuery
	Debug() ICodeSectionDo
	WithContext(ctx context.Context) ICodeSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICodeSectionDo
	WriteDB() ICodeSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICodeSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICodeSectionDo
	Not(conds ...gen.Condition) ICodeSectionDo
	Or(conds ...gen.Condition) ICodeSectionDo
	Select(conds ...field.Expr) ICodeSectionDo
	Where(conds ...gen.Condition) ICodeSectionDo
	Order(conds ...field.Expr) ICodeSectionDo
	Distinct(cols ...field.Expr) ICodeSectionDo
	Omit(cols ...field.Expr) ICodeSectionDo
	Join(table schema.Tabler, on ...field.Expr) ICodeSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICodeSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICodeSectionDo
	Group(cols ...field.Expr) ICodeSectionDo
	Having(conds ...gen.Condition) ICodeSectionDo
	Limit(limit int) ICodeSectionDo
	Offset(offset int) ICodeSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeSectionDo
	Unscoped() ICodeSectionDo
	Create(values ...*entity.CodeSection) error
	CreateInBatches(values []*entity.CodeSection, batchSize int) error
	Save(values ...*entity.CodeSection) error
	First() (*entity.CodeSection, error)
	Take() (*entity.CodeSection, error)
	Last() (*entity.CodeSection, error)
	Find() ([]*entity.CodeSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeSection, err error)
	FindInBatches(result *[]*entity.CodeSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CodeSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICodeSectionDo
	Assign(attrs ...field.AssignExpr) ICodeSectionDo
	Joins(fields ...field.RelationField) ICodeSectionDo
	Preload(fields ...field.RelationField) ICodeSectionDo
	FirstOrInit() (*entity.CodeSection, error)
	FirstOrCreate() (*entity.CodeSection, error)
	FindByPage(offset int, limit int) (result []*entity.CodeSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICodeSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c codeSectionDo) Debug() ICodeSectionDo {
	return c.withDO(c.DO.Debug())
}

func (c codeSectionDo) WithContext(ctx context.Context) ICodeSectionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeSectionDo) ReadDB() ICodeSectionDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeSectionDo) WriteDB() ICodeSectionDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeSectionDo) Session(config *gorm.Session) ICodeSectionDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeSectionDo) Clauses(conds ...clause.Expression) ICodeSectionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeSectionDo) Returning(value interface{}, columns ...string) ICodeSectionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeSectionDo) Not(conds ...gen.Condition) ICodeSectionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeSectionDo) Or(conds ...gen.Condition) ICodeSectionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeSectionDo) Select(conds ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeSectionDo) Where(conds ...gen.Condition) ICodeSectionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeSectionDo) Order(conds ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeSectionDo) Distinct(cols ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeSectionDo) Omit(cols ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeSectionDo) Join(table schema.Tabler, on ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeSectionDo) Group(cols ...field.Expr) ICodeSectionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeSectionDo) Having(conds ...gen.Condition) ICodeSectionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeSectionDo) Limit(limit int) ICodeSectionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeSectionDo) Offset(offset int) ICodeSectionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeSectionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeSectionDo) Unscoped() ICodeSectionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeSectionDo) Create(values ...*entity.CodeSection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeSectionDo) CreateInBatches(values []*entity.CodeSection, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeSectionDo) Save(values ...*entity.CodeSection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeSectionDo) First() (*entity.CodeSection, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSection), nil
	}
}

func (c codeSectionDo) Take() (*entity.CodeSection, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSection), nil
	}
}

func (c codeSectionDo) Last() (*entity.CodeSection, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSection), nil
	}
}

func (c codeSectionDo) Find() ([]*entity.CodeSection, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CodeSection), err
}

func (c codeSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeSection, err error) {
	buf := make([]*entity.CodeSection, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeSectionDo) FindInBatches(result *[]*entity.CodeSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeSectionDo) Attrs(attrs ...field.AssignExpr) ICodeSectionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeSectionDo) Assign(attrs ...field.AssignExpr) ICodeSectionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeSectionDo) Joins(fields ...field.RelationField) ICodeSectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeSectionDo) Preload(fields ...field.RelationField) ICodeSectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeSectionDo) FirstOrInit() (*entity.CodeSection, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSection), nil
	}
}

func (c codeSectionDo) FirstOrCreate() (*entity.CodeSection, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeSection), nil
	}
}

func (c codeSectionDo) FindByPage(offset int, limit int) (result []*entity.CodeSection, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeSectionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeSectionDo) Delete(models ...*entity.CodeSection) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeSectionDo) withDO(do gen.Dao) *codeSectionDo {
	c.DO = *do.(*gen.DO)
	return c
}
