// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newAnswerSectionAnswer(db *gorm.DB, opts ...gen.DOOption) answerSectionAnswer {
	_answerSectionAnswer := answerSectionAnswer{}

	_answerSectionAnswer.answerSectionAnswerDo.UseDB(db, opts...)
	_answerSectionAnswer.answerSectionAnswerDo.UseModel(&entity.AnswerSectionAnswer{})

	tableName := _answerSectionAnswer.answerSectionAnswerDo.TableName()
	_answerSectionAnswer.ALL = field.NewAsterisk(tableName)
	_answerSectionAnswer.Id = field.NewField(tableName, "id")
	_answerSectionAnswer.CreatedAt = field.NewTime(tableName, "created_at")
	_answerSectionAnswer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_answerSectionAnswer.DeletedAt = field.NewField(tableName, "deleted_at")
	_answerSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_answerSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")
	_answerSectionAnswer.Answer = field.NewString(tableName, "answer")
	_answerSectionAnswer.Review = answerSectionAnswerHasOneReview{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Review", "entity.AnswerReview"),
	}

	_answerSectionAnswer.fillFieldMap()

	return _answerSectionAnswer
}

type answerSectionAnswer struct {
	answerSectionAnswerDo answerSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OwnerID   field.Field
	OwnerType field.String
	Answer    field.String
	Review    answerSectionAnswerHasOneReview

	fieldMap map[string]field.Expr
}

func (a answerSectionAnswer) Table(newTableName string) *answerSectionAnswer {
	a.answerSectionAnswerDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a answerSectionAnswer) As(alias string) *answerSectionAnswer {
	a.answerSectionAnswerDo.DO = *(a.answerSectionAnswerDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *answerSectionAnswer) updateTableName(table string) *answerSectionAnswer {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewField(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.OwnerID = field.NewField(table, "owner_id")
	a.OwnerType = field.NewString(table, "owner_type")
	a.Answer = field.NewString(table, "answer")

	a.fillFieldMap()

	return a
}

func (a *answerSectionAnswer) WithContext(ctx context.Context) IAnswerSectionAnswerDo {
	return a.answerSectionAnswerDo.WithContext(ctx)
}

func (a answerSectionAnswer) TableName() string { return a.answerSectionAnswerDo.TableName() }

func (a answerSectionAnswer) Alias() string { return a.answerSectionAnswerDo.Alias() }

func (a *answerSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *answerSectionAnswer) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.Id
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["owner_id"] = a.OwnerID
	a.fieldMap["owner_type"] = a.OwnerType
	a.fieldMap["answer"] = a.Answer

}

func (a answerSectionAnswer) clone(db *gorm.DB) answerSectionAnswer {
	a.answerSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a answerSectionAnswer) replaceDB(db *gorm.DB) answerSectionAnswer {
	a.answerSectionAnswerDo.ReplaceDB(db)
	return a
}

type answerSectionAnswerHasOneReview struct {
	db *gorm.DB

	field.RelationField
}

func (a answerSectionAnswerHasOneReview) Where(conds ...field.Expr) *answerSectionAnswerHasOneReview {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a answerSectionAnswerHasOneReview) WithContext(ctx context.Context) *answerSectionAnswerHasOneReview {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a answerSectionAnswerHasOneReview) Session(session *gorm.Session) *answerSectionAnswerHasOneReview {
	a.db = a.db.Session(session)
	return &a
}

func (a answerSectionAnswerHasOneReview) Model(m *entity.AnswerSectionAnswer) *answerSectionAnswerHasOneReviewTx {
	return &answerSectionAnswerHasOneReviewTx{a.db.Model(m).Association(a.Name())}
}

type answerSectionAnswerHasOneReviewTx struct{ tx *gorm.Association }

func (a answerSectionAnswerHasOneReviewTx) Find() (result *entity.AnswerReview, err error) {
	return result, a.tx.Find(&result)
}

func (a answerSectionAnswerHasOneReviewTx) Append(values ...*entity.AnswerReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a answerSectionAnswerHasOneReviewTx) Replace(values ...*entity.AnswerReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a answerSectionAnswerHasOneReviewTx) Delete(values ...*entity.AnswerReview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a answerSectionAnswerHasOneReviewTx) Clear() error {
	return a.tx.Clear()
}

func (a answerSectionAnswerHasOneReviewTx) Count() int64 {
	return a.tx.Count()
}

type answerSectionAnswerDo struct{ gen.DO }

type IAnswerSectionAnswerDo interface {
	gen.SubQuery
	Debug() IAnswerSectionAnswerDo
	WithContext(ctx context.Context) IAnswerSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnswerSectionAnswerDo
	WriteDB() IAnswerSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnswerSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnswerSectionAnswerDo
	Not(conds ...gen.Condition) IAnswerSectionAnswerDo
	Or(conds ...gen.Condition) IAnswerSectionAnswerDo
	Select(conds ...field.Expr) IAnswerSectionAnswerDo
	Where(conds ...gen.Condition) IAnswerSectionAnswerDo
	Order(conds ...field.Expr) IAnswerSectionAnswerDo
	Distinct(cols ...field.Expr) IAnswerSectionAnswerDo
	Omit(cols ...field.Expr) IAnswerSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo
	Group(cols ...field.Expr) IAnswerSectionAnswerDo
	Having(conds ...gen.Condition) IAnswerSectionAnswerDo
	Limit(limit int) IAnswerSectionAnswerDo
	Offset(offset int) IAnswerSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerSectionAnswerDo
	Unscoped() IAnswerSectionAnswerDo
	Create(values ...*entity.AnswerSectionAnswer) error
	CreateInBatches(values []*entity.AnswerSectionAnswer, batchSize int) error
	Save(values ...*entity.AnswerSectionAnswer) error
	First() (*entity.AnswerSectionAnswer, error)
	Take() (*entity.AnswerSectionAnswer, error)
	Last() (*entity.AnswerSectionAnswer, error)
	Find() ([]*entity.AnswerSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AnswerSectionAnswer, err error)
	FindInBatches(result *[]*entity.AnswerSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.AnswerSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnswerSectionAnswerDo
	Assign(attrs ...field.AssignExpr) IAnswerSectionAnswerDo
	Joins(fields ...field.RelationField) IAnswerSectionAnswerDo
	Preload(fields ...field.RelationField) IAnswerSectionAnswerDo
	FirstOrInit() (*entity.AnswerSectionAnswer, error)
	FirstOrCreate() (*entity.AnswerSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.AnswerSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnswerSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a answerSectionAnswerDo) Debug() IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Debug())
}

func (a answerSectionAnswerDo) WithContext(ctx context.Context) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a answerSectionAnswerDo) ReadDB() IAnswerSectionAnswerDo {
	return a.Clauses(dbresolver.Read)
}

func (a answerSectionAnswerDo) WriteDB() IAnswerSectionAnswerDo {
	return a.Clauses(dbresolver.Write)
}

func (a answerSectionAnswerDo) Session(config *gorm.Session) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Session(config))
}

func (a answerSectionAnswerDo) Clauses(conds ...clause.Expression) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a answerSectionAnswerDo) Returning(value interface{}, columns ...string) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a answerSectionAnswerDo) Not(conds ...gen.Condition) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a answerSectionAnswerDo) Or(conds ...gen.Condition) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a answerSectionAnswerDo) Select(conds ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a answerSectionAnswerDo) Where(conds ...gen.Condition) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a answerSectionAnswerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAnswerSectionAnswerDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a answerSectionAnswerDo) Order(conds ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a answerSectionAnswerDo) Distinct(cols ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a answerSectionAnswerDo) Omit(cols ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a answerSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a answerSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a answerSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a answerSectionAnswerDo) Group(cols ...field.Expr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a answerSectionAnswerDo) Having(conds ...gen.Condition) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a answerSectionAnswerDo) Limit(limit int) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a answerSectionAnswerDo) Offset(offset int) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a answerSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a answerSectionAnswerDo) Unscoped() IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Unscoped())
}

func (a answerSectionAnswerDo) Create(values ...*entity.AnswerSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a answerSectionAnswerDo) CreateInBatches(values []*entity.AnswerSectionAnswer, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a answerSectionAnswerDo) Save(values ...*entity.AnswerSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a answerSectionAnswerDo) First() (*entity.AnswerSectionAnswer, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AnswerSectionAnswer), nil
	}
}

func (a answerSectionAnswerDo) Take() (*entity.AnswerSectionAnswer, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AnswerSectionAnswer), nil
	}
}

func (a answerSectionAnswerDo) Last() (*entity.AnswerSectionAnswer, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AnswerSectionAnswer), nil
	}
}

func (a answerSectionAnswerDo) Find() ([]*entity.AnswerSectionAnswer, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AnswerSectionAnswer), err
}

func (a answerSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AnswerSectionAnswer, err error) {
	buf := make([]*entity.AnswerSectionAnswer, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a answerSectionAnswerDo) FindInBatches(result *[]*entity.AnswerSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a answerSectionAnswerDo) Attrs(attrs ...field.AssignExpr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a answerSectionAnswerDo) Assign(attrs ...field.AssignExpr) IAnswerSectionAnswerDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a answerSectionAnswerDo) Joins(fields ...field.RelationField) IAnswerSectionAnswerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a answerSectionAnswerDo) Preload(fields ...field.RelationField) IAnswerSectionAnswerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a answerSectionAnswerDo) FirstOrInit() (*entity.AnswerSectionAnswer, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AnswerSectionAnswer), nil
	}
}

func (a answerSectionAnswerDo) FirstOrCreate() (*entity.AnswerSectionAnswer, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AnswerSectionAnswer), nil
	}
}

func (a answerSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.AnswerSectionAnswer, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a answerSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a answerSectionAnswerDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a answerSectionAnswerDo) Delete(models ...*entity.AnswerSectionAnswer) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *answerSectionAnswerDo) withDO(do gen.Dao) *answerSectionAnswerDo {
	a.DO = *do.(*gen.DO)
	return a
}
