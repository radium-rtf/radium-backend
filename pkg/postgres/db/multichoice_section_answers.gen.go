// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newMultichoiceSectionAnswer(db *gorm.DB, opts ...gen.DOOption) multichoiceSectionAnswer {
	_multichoiceSectionAnswer := multichoiceSectionAnswer{}

	_multichoiceSectionAnswer.multichoiceSectionAnswerDo.UseDB(db, opts...)
	_multichoiceSectionAnswer.multichoiceSectionAnswerDo.UseModel(&entity.MultichoiceSectionAnswer{})

	tableName := _multichoiceSectionAnswer.multichoiceSectionAnswerDo.TableName()
	_multichoiceSectionAnswer.ALL = field.NewAsterisk(tableName)
	_multichoiceSectionAnswer.Id = field.NewField(tableName, "id")
	_multichoiceSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_multichoiceSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")
	_multichoiceSectionAnswer.Answer = field.NewField(tableName, "answer")

	_multichoiceSectionAnswer.fillFieldMap()

	return _multichoiceSectionAnswer
}

type multichoiceSectionAnswer struct {
	multichoiceSectionAnswerDo multichoiceSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	OwnerID   field.Field
	OwnerType field.String
	Answer    field.Field

	fieldMap map[string]field.Expr
}

func (m multichoiceSectionAnswer) Table(newTableName string) *multichoiceSectionAnswer {
	m.multichoiceSectionAnswerDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multichoiceSectionAnswer) As(alias string) *multichoiceSectionAnswer {
	m.multichoiceSectionAnswerDo.DO = *(m.multichoiceSectionAnswerDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multichoiceSectionAnswer) updateTableName(table string) *multichoiceSectionAnswer {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewField(table, "id")
	m.OwnerID = field.NewField(table, "owner_id")
	m.OwnerType = field.NewString(table, "owner_type")
	m.Answer = field.NewField(table, "answer")

	m.fillFieldMap()

	return m
}

func (m *multichoiceSectionAnswer) WithContext(ctx context.Context) IMultichoiceSectionAnswerDo {
	return m.multichoiceSectionAnswerDo.WithContext(ctx)
}

func (m multichoiceSectionAnswer) TableName() string { return m.multichoiceSectionAnswerDo.TableName() }

func (m multichoiceSectionAnswer) Alias() string { return m.multichoiceSectionAnswerDo.Alias() }

func (m *multichoiceSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multichoiceSectionAnswer) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.Id
	m.fieldMap["owner_id"] = m.OwnerID
	m.fieldMap["owner_type"] = m.OwnerType
	m.fieldMap["answer"] = m.Answer
}

func (m multichoiceSectionAnswer) clone(db *gorm.DB) multichoiceSectionAnswer {
	m.multichoiceSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multichoiceSectionAnswer) replaceDB(db *gorm.DB) multichoiceSectionAnswer {
	m.multichoiceSectionAnswerDo.ReplaceDB(db)
	return m
}

type multichoiceSectionAnswerDo struct{ gen.DO }

type IMultichoiceSectionAnswerDo interface {
	gen.SubQuery
	Debug() IMultichoiceSectionAnswerDo
	WithContext(ctx context.Context) IMultichoiceSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMultichoiceSectionAnswerDo
	WriteDB() IMultichoiceSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMultichoiceSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMultichoiceSectionAnswerDo
	Not(conds ...gen.Condition) IMultichoiceSectionAnswerDo
	Or(conds ...gen.Condition) IMultichoiceSectionAnswerDo
	Select(conds ...field.Expr) IMultichoiceSectionAnswerDo
	Where(conds ...gen.Condition) IMultichoiceSectionAnswerDo
	Order(conds ...field.Expr) IMultichoiceSectionAnswerDo
	Distinct(cols ...field.Expr) IMultichoiceSectionAnswerDo
	Omit(cols ...field.Expr) IMultichoiceSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo
	Group(cols ...field.Expr) IMultichoiceSectionAnswerDo
	Having(conds ...gen.Condition) IMultichoiceSectionAnswerDo
	Limit(limit int) IMultichoiceSectionAnswerDo
	Offset(offset int) IMultichoiceSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMultichoiceSectionAnswerDo
	Unscoped() IMultichoiceSectionAnswerDo
	Create(values ...*entity.MultichoiceSectionAnswer) error
	CreateInBatches(values []*entity.MultichoiceSectionAnswer, batchSize int) error
	Save(values ...*entity.MultichoiceSectionAnswer) error
	First() (*entity.MultichoiceSectionAnswer, error)
	Take() (*entity.MultichoiceSectionAnswer, error)
	Last() (*entity.MultichoiceSectionAnswer, error)
	Find() ([]*entity.MultichoiceSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.MultichoiceSectionAnswer, err error)
	FindInBatches(result *[]*entity.MultichoiceSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.MultichoiceSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMultichoiceSectionAnswerDo
	Assign(attrs ...field.AssignExpr) IMultichoiceSectionAnswerDo
	Joins(fields ...field.RelationField) IMultichoiceSectionAnswerDo
	Preload(fields ...field.RelationField) IMultichoiceSectionAnswerDo
	FirstOrInit() (*entity.MultichoiceSectionAnswer, error)
	FirstOrCreate() (*entity.MultichoiceSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.MultichoiceSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMultichoiceSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m multichoiceSectionAnswerDo) Debug() IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Debug())
}

func (m multichoiceSectionAnswerDo) WithContext(ctx context.Context) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multichoiceSectionAnswerDo) ReadDB() IMultichoiceSectionAnswerDo {
	return m.Clauses(dbresolver.Read)
}

func (m multichoiceSectionAnswerDo) WriteDB() IMultichoiceSectionAnswerDo {
	return m.Clauses(dbresolver.Write)
}

func (m multichoiceSectionAnswerDo) Session(config *gorm.Session) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Session(config))
}

func (m multichoiceSectionAnswerDo) Clauses(conds ...clause.Expression) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multichoiceSectionAnswerDo) Returning(value interface{}, columns ...string) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multichoiceSectionAnswerDo) Not(conds ...gen.Condition) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multichoiceSectionAnswerDo) Or(conds ...gen.Condition) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multichoiceSectionAnswerDo) Select(conds ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multichoiceSectionAnswerDo) Where(conds ...gen.Condition) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multichoiceSectionAnswerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMultichoiceSectionAnswerDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m multichoiceSectionAnswerDo) Order(conds ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multichoiceSectionAnswerDo) Distinct(cols ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multichoiceSectionAnswerDo) Omit(cols ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multichoiceSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multichoiceSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multichoiceSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multichoiceSectionAnswerDo) Group(cols ...field.Expr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multichoiceSectionAnswerDo) Having(conds ...gen.Condition) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multichoiceSectionAnswerDo) Limit(limit int) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multichoiceSectionAnswerDo) Offset(offset int) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multichoiceSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multichoiceSectionAnswerDo) Unscoped() IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multichoiceSectionAnswerDo) Create(values ...*entity.MultichoiceSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multichoiceSectionAnswerDo) CreateInBatches(values []*entity.MultichoiceSectionAnswer, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multichoiceSectionAnswerDo) Save(values ...*entity.MultichoiceSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multichoiceSectionAnswerDo) First() (*entity.MultichoiceSectionAnswer, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultichoiceSectionAnswer), nil
	}
}

func (m multichoiceSectionAnswerDo) Take() (*entity.MultichoiceSectionAnswer, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultichoiceSectionAnswer), nil
	}
}

func (m multichoiceSectionAnswerDo) Last() (*entity.MultichoiceSectionAnswer, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultichoiceSectionAnswer), nil
	}
}

func (m multichoiceSectionAnswerDo) Find() ([]*entity.MultichoiceSectionAnswer, error) {
	result, err := m.DO.Find()
	return result.([]*entity.MultichoiceSectionAnswer), err
}

func (m multichoiceSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.MultichoiceSectionAnswer, err error) {
	buf := make([]*entity.MultichoiceSectionAnswer, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multichoiceSectionAnswerDo) FindInBatches(result *[]*entity.MultichoiceSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multichoiceSectionAnswerDo) Attrs(attrs ...field.AssignExpr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multichoiceSectionAnswerDo) Assign(attrs ...field.AssignExpr) IMultichoiceSectionAnswerDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multichoiceSectionAnswerDo) Joins(fields ...field.RelationField) IMultichoiceSectionAnswerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multichoiceSectionAnswerDo) Preload(fields ...field.RelationField) IMultichoiceSectionAnswerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multichoiceSectionAnswerDo) FirstOrInit() (*entity.MultichoiceSectionAnswer, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultichoiceSectionAnswer), nil
	}
}

func (m multichoiceSectionAnswerDo) FirstOrCreate() (*entity.MultichoiceSectionAnswer, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.MultichoiceSectionAnswer), nil
	}
}

func (m multichoiceSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.MultichoiceSectionAnswer, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multichoiceSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multichoiceSectionAnswerDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multichoiceSectionAnswerDo) Delete(models ...*entity.MultichoiceSectionAnswer) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multichoiceSectionAnswerDo) withDO(do gen.Dao) *multichoiceSectionAnswerDo {
	m.DO = *do.(*gen.DO)
	return m
}
