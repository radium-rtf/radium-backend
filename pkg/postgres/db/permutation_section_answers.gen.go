// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newPermutationSectionAnswer(db *gorm.DB, opts ...gen.DOOption) permutationSectionAnswer {
	_permutationSectionAnswer := permutationSectionAnswer{}

	_permutationSectionAnswer.permutationSectionAnswerDo.UseDB(db, opts...)
	_permutationSectionAnswer.permutationSectionAnswerDo.UseModel(&entity.PermutationSectionAnswer{})

	tableName := _permutationSectionAnswer.permutationSectionAnswerDo.TableName()
	_permutationSectionAnswer.ALL = field.NewAsterisk(tableName)
	_permutationSectionAnswer.Id = field.NewField(tableName, "id")
	_permutationSectionAnswer.CreatedAt = field.NewTime(tableName, "created_at")
	_permutationSectionAnswer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_permutationSectionAnswer.DeletedAt = field.NewField(tableName, "deleted_at")
	_permutationSectionAnswer.Answer = field.NewField(tableName, "answer")
	_permutationSectionAnswer.OwnerID = field.NewField(tableName, "owner_id")
	_permutationSectionAnswer.OwnerType = field.NewString(tableName, "owner_type")

	_permutationSectionAnswer.fillFieldMap()

	return _permutationSectionAnswer
}

type permutationSectionAnswer struct {
	permutationSectionAnswerDo permutationSectionAnswerDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Answer    field.Field
	OwnerID   field.Field
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (p permutationSectionAnswer) Table(newTableName string) *permutationSectionAnswer {
	p.permutationSectionAnswerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permutationSectionAnswer) As(alias string) *permutationSectionAnswer {
	p.permutationSectionAnswerDo.DO = *(p.permutationSectionAnswerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permutationSectionAnswer) updateTableName(table string) *permutationSectionAnswer {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewField(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Answer = field.NewField(table, "answer")
	p.OwnerID = field.NewField(table, "owner_id")
	p.OwnerType = field.NewString(table, "owner_type")

	p.fillFieldMap()

	return p
}

func (p *permutationSectionAnswer) WithContext(ctx context.Context) IPermutationSectionAnswerDo {
	return p.permutationSectionAnswerDo.WithContext(ctx)
}

func (p permutationSectionAnswer) TableName() string { return p.permutationSectionAnswerDo.TableName() }

func (p permutationSectionAnswer) Alias() string { return p.permutationSectionAnswerDo.Alias() }

func (p permutationSectionAnswer) Columns(cols ...field.Expr) gen.Columns {
	return p.permutationSectionAnswerDo.Columns(cols...)
}

func (p *permutationSectionAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permutationSectionAnswer) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["answer"] = p.Answer
	p.fieldMap["owner_id"] = p.OwnerID
	p.fieldMap["owner_type"] = p.OwnerType
}

func (p permutationSectionAnswer) clone(db *gorm.DB) permutationSectionAnswer {
	p.permutationSectionAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permutationSectionAnswer) replaceDB(db *gorm.DB) permutationSectionAnswer {
	p.permutationSectionAnswerDo.ReplaceDB(db)
	return p
}

type permutationSectionAnswerDo struct{ gen.DO }

type IPermutationSectionAnswerDo interface {
	gen.SubQuery
	Debug() IPermutationSectionAnswerDo
	WithContext(ctx context.Context) IPermutationSectionAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPermutationSectionAnswerDo
	WriteDB() IPermutationSectionAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPermutationSectionAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPermutationSectionAnswerDo
	Not(conds ...gen.Condition) IPermutationSectionAnswerDo
	Or(conds ...gen.Condition) IPermutationSectionAnswerDo
	Select(conds ...field.Expr) IPermutationSectionAnswerDo
	Where(conds ...gen.Condition) IPermutationSectionAnswerDo
	Order(conds ...field.Expr) IPermutationSectionAnswerDo
	Distinct(cols ...field.Expr) IPermutationSectionAnswerDo
	Omit(cols ...field.Expr) IPermutationSectionAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo
	Group(cols ...field.Expr) IPermutationSectionAnswerDo
	Having(conds ...gen.Condition) IPermutationSectionAnswerDo
	Limit(limit int) IPermutationSectionAnswerDo
	Offset(offset int) IPermutationSectionAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPermutationSectionAnswerDo
	Unscoped() IPermutationSectionAnswerDo
	Create(values ...*entity.PermutationSectionAnswer) error
	CreateInBatches(values []*entity.PermutationSectionAnswer, batchSize int) error
	Save(values ...*entity.PermutationSectionAnswer) error
	First() (*entity.PermutationSectionAnswer, error)
	Take() (*entity.PermutationSectionAnswer, error)
	Last() (*entity.PermutationSectionAnswer, error)
	Find() ([]*entity.PermutationSectionAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.PermutationSectionAnswer, err error)
	FindInBatches(result *[]*entity.PermutationSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.PermutationSectionAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPermutationSectionAnswerDo
	Assign(attrs ...field.AssignExpr) IPermutationSectionAnswerDo
	Joins(fields ...field.RelationField) IPermutationSectionAnswerDo
	Preload(fields ...field.RelationField) IPermutationSectionAnswerDo
	FirstOrInit() (*entity.PermutationSectionAnswer, error)
	FirstOrCreate() (*entity.PermutationSectionAnswer, error)
	FindByPage(offset int, limit int) (result []*entity.PermutationSectionAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPermutationSectionAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p permutationSectionAnswerDo) Debug() IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Debug())
}

func (p permutationSectionAnswerDo) WithContext(ctx context.Context) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permutationSectionAnswerDo) ReadDB() IPermutationSectionAnswerDo {
	return p.Clauses(dbresolver.Read)
}

func (p permutationSectionAnswerDo) WriteDB() IPermutationSectionAnswerDo {
	return p.Clauses(dbresolver.Write)
}

func (p permutationSectionAnswerDo) Session(config *gorm.Session) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Session(config))
}

func (p permutationSectionAnswerDo) Clauses(conds ...clause.Expression) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permutationSectionAnswerDo) Returning(value interface{}, columns ...string) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permutationSectionAnswerDo) Not(conds ...gen.Condition) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permutationSectionAnswerDo) Or(conds ...gen.Condition) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permutationSectionAnswerDo) Select(conds ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permutationSectionAnswerDo) Where(conds ...gen.Condition) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permutationSectionAnswerDo) Order(conds ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permutationSectionAnswerDo) Distinct(cols ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permutationSectionAnswerDo) Omit(cols ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permutationSectionAnswerDo) Join(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permutationSectionAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permutationSectionAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permutationSectionAnswerDo) Group(cols ...field.Expr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permutationSectionAnswerDo) Having(conds ...gen.Condition) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permutationSectionAnswerDo) Limit(limit int) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permutationSectionAnswerDo) Offset(offset int) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permutationSectionAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permutationSectionAnswerDo) Unscoped() IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permutationSectionAnswerDo) Create(values ...*entity.PermutationSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permutationSectionAnswerDo) CreateInBatches(values []*entity.PermutationSectionAnswer, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permutationSectionAnswerDo) Save(values ...*entity.PermutationSectionAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permutationSectionAnswerDo) First() (*entity.PermutationSectionAnswer, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PermutationSectionAnswer), nil
	}
}

func (p permutationSectionAnswerDo) Take() (*entity.PermutationSectionAnswer, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PermutationSectionAnswer), nil
	}
}

func (p permutationSectionAnswerDo) Last() (*entity.PermutationSectionAnswer, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PermutationSectionAnswer), nil
	}
}

func (p permutationSectionAnswerDo) Find() ([]*entity.PermutationSectionAnswer, error) {
	result, err := p.DO.Find()
	return result.([]*entity.PermutationSectionAnswer), err
}

func (p permutationSectionAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.PermutationSectionAnswer, err error) {
	buf := make([]*entity.PermutationSectionAnswer, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permutationSectionAnswerDo) FindInBatches(result *[]*entity.PermutationSectionAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permutationSectionAnswerDo) Attrs(attrs ...field.AssignExpr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permutationSectionAnswerDo) Assign(attrs ...field.AssignExpr) IPermutationSectionAnswerDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permutationSectionAnswerDo) Joins(fields ...field.RelationField) IPermutationSectionAnswerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permutationSectionAnswerDo) Preload(fields ...field.RelationField) IPermutationSectionAnswerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permutationSectionAnswerDo) FirstOrInit() (*entity.PermutationSectionAnswer, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PermutationSectionAnswer), nil
	}
}

func (p permutationSectionAnswerDo) FirstOrCreate() (*entity.PermutationSectionAnswer, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PermutationSectionAnswer), nil
	}
}

func (p permutationSectionAnswerDo) FindByPage(offset int, limit int) (result []*entity.PermutationSectionAnswer, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permutationSectionAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permutationSectionAnswerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permutationSectionAnswerDo) Delete(models ...*entity.PermutationSectionAnswer) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permutationSectionAnswerDo) withDO(do gen.Dao) *permutationSectionAnswerDo {
	p.DO = *do.(*gen.DO)
	return p
}
