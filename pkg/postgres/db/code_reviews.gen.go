// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/radium-rtf/radium-backend/internal/entity"
)

func newCodeReview(db *gorm.DB, opts ...gen.DOOption) codeReview {
	_codeReview := codeReview{}

	_codeReview.codeReviewDo.UseDB(db, opts...)
	_codeReview.codeReviewDo.UseModel(&entity.CodeReview{})

	tableName := _codeReview.codeReviewDo.TableName()
	_codeReview.ALL = field.NewAsterisk(tableName)
	_codeReview.Id = field.NewField(tableName, "id")
	_codeReview.CreatedAt = field.NewTime(tableName, "created_at")
	_codeReview.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeReview.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeReview.OwnerId = field.NewField(tableName, "owner_id")
	_codeReview.Score = field.NewFloat32(tableName, "score")
	_codeReview.Comment = field.NewString(tableName, "comment")

	_codeReview.fillFieldMap()

	return _codeReview
}

type codeReview struct {
	codeReviewDo codeReviewDo

	ALL       field.Asterisk
	Id        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OwnerId   field.Field
	Score     field.Float32
	Comment   field.String

	fieldMap map[string]field.Expr
}

func (c codeReview) Table(newTableName string) *codeReview {
	c.codeReviewDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeReview) As(alias string) *codeReview {
	c.codeReviewDo.DO = *(c.codeReviewDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeReview) updateTableName(table string) *codeReview {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.OwnerId = field.NewField(table, "owner_id")
	c.Score = field.NewFloat32(table, "score")
	c.Comment = field.NewString(table, "comment")

	c.fillFieldMap()

	return c
}

func (c *codeReview) WithContext(ctx context.Context) ICodeReviewDo {
	return c.codeReviewDo.WithContext(ctx)
}

func (c codeReview) TableName() string { return c.codeReviewDo.TableName() }

func (c codeReview) Alias() string { return c.codeReviewDo.Alias() }

func (c *codeReview) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeReview) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.Id
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["owner_id"] = c.OwnerId
	c.fieldMap["score"] = c.Score
	c.fieldMap["comment"] = c.Comment
}

func (c codeReview) clone(db *gorm.DB) codeReview {
	c.codeReviewDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeReview) replaceDB(db *gorm.DB) codeReview {
	c.codeReviewDo.ReplaceDB(db)
	return c
}

type codeReviewDo struct{ gen.DO }

type ICodeReviewDo interface {
	gen.SubQuery
	Debug() ICodeReviewDo
	WithContext(ctx context.Context) ICodeReviewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICodeReviewDo
	WriteDB() ICodeReviewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICodeReviewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICodeReviewDo
	Not(conds ...gen.Condition) ICodeReviewDo
	Or(conds ...gen.Condition) ICodeReviewDo
	Select(conds ...field.Expr) ICodeReviewDo
	Where(conds ...gen.Condition) ICodeReviewDo
	Order(conds ...field.Expr) ICodeReviewDo
	Distinct(cols ...field.Expr) ICodeReviewDo
	Omit(cols ...field.Expr) ICodeReviewDo
	Join(table schema.Tabler, on ...field.Expr) ICodeReviewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICodeReviewDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICodeReviewDo
	Group(cols ...field.Expr) ICodeReviewDo
	Having(conds ...gen.Condition) ICodeReviewDo
	Limit(limit int) ICodeReviewDo
	Offset(offset int) ICodeReviewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeReviewDo
	Unscoped() ICodeReviewDo
	Create(values ...*entity.CodeReview) error
	CreateInBatches(values []*entity.CodeReview, batchSize int) error
	Save(values ...*entity.CodeReview) error
	First() (*entity.CodeReview, error)
	Take() (*entity.CodeReview, error)
	Last() (*entity.CodeReview, error)
	Find() ([]*entity.CodeReview, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeReview, err error)
	FindInBatches(result *[]*entity.CodeReview, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CodeReview) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICodeReviewDo
	Assign(attrs ...field.AssignExpr) ICodeReviewDo
	Joins(fields ...field.RelationField) ICodeReviewDo
	Preload(fields ...field.RelationField) ICodeReviewDo
	FirstOrInit() (*entity.CodeReview, error)
	FirstOrCreate() (*entity.CodeReview, error)
	FindByPage(offset int, limit int) (result []*entity.CodeReview, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICodeReviewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c codeReviewDo) Debug() ICodeReviewDo {
	return c.withDO(c.DO.Debug())
}

func (c codeReviewDo) WithContext(ctx context.Context) ICodeReviewDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeReviewDo) ReadDB() ICodeReviewDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeReviewDo) WriteDB() ICodeReviewDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeReviewDo) Session(config *gorm.Session) ICodeReviewDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeReviewDo) Clauses(conds ...clause.Expression) ICodeReviewDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeReviewDo) Returning(value interface{}, columns ...string) ICodeReviewDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeReviewDo) Not(conds ...gen.Condition) ICodeReviewDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeReviewDo) Or(conds ...gen.Condition) ICodeReviewDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeReviewDo) Select(conds ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeReviewDo) Where(conds ...gen.Condition) ICodeReviewDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeReviewDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICodeReviewDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c codeReviewDo) Order(conds ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeReviewDo) Distinct(cols ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeReviewDo) Omit(cols ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeReviewDo) Join(table schema.Tabler, on ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeReviewDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeReviewDo) RightJoin(table schema.Tabler, on ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeReviewDo) Group(cols ...field.Expr) ICodeReviewDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeReviewDo) Having(conds ...gen.Condition) ICodeReviewDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeReviewDo) Limit(limit int) ICodeReviewDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeReviewDo) Offset(offset int) ICodeReviewDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeReviewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeReviewDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeReviewDo) Unscoped() ICodeReviewDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeReviewDo) Create(values ...*entity.CodeReview) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeReviewDo) CreateInBatches(values []*entity.CodeReview, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeReviewDo) Save(values ...*entity.CodeReview) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeReviewDo) First() (*entity.CodeReview, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeReview), nil
	}
}

func (c codeReviewDo) Take() (*entity.CodeReview, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeReview), nil
	}
}

func (c codeReviewDo) Last() (*entity.CodeReview, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeReview), nil
	}
}

func (c codeReviewDo) Find() ([]*entity.CodeReview, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CodeReview), err
}

func (c codeReviewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CodeReview, err error) {
	buf := make([]*entity.CodeReview, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeReviewDo) FindInBatches(result *[]*entity.CodeReview, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeReviewDo) Attrs(attrs ...field.AssignExpr) ICodeReviewDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeReviewDo) Assign(attrs ...field.AssignExpr) ICodeReviewDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeReviewDo) Joins(fields ...field.RelationField) ICodeReviewDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeReviewDo) Preload(fields ...field.RelationField) ICodeReviewDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeReviewDo) FirstOrInit() (*entity.CodeReview, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeReview), nil
	}
}

func (c codeReviewDo) FirstOrCreate() (*entity.CodeReview, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CodeReview), nil
	}
}

func (c codeReviewDo) FindByPage(offset int, limit int) (result []*entity.CodeReview, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeReviewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeReviewDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeReviewDo) Delete(models ...*entity.CodeReview) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeReviewDo) withDO(do gen.Dao) *codeReviewDo {
	c.DO = *do.(*gen.DO)
	return c
}
