basePath: /v1
definitions:
  entity.AnswerPost:
    properties:
      choice:
        $ref: '#/definitions/entity.ChoiceSectionAnswer'
      multiChoice:
        $ref: '#/definitions/entity.MultichoiceSectionAnswer'
      shortAnswer:
        $ref: '#/definitions/entity.ShortAnswerSectionAnswer'
    type: object
  entity.ChoiceSection:
    properties:
      answer:
        type: string
      id:
        type: string
      maxScore:
        type: integer
      ownerID:
        type: string
      ownerType:
        type: string
      question:
        type: string
      variants:
        items:
          type: string
        type: array
    type: object
  entity.ChoiceSectionAnswer:
    properties:
      answer:
        type: string
      id:
        type: string
    type: object
  entity.ChoiceSectionDto:
    properties:
      maxScore:
        type: integer
      question:
        type: string
      score:
        type: integer
      variants:
        items:
          type: string
        type: array
      verdict:
        type: string
    type: object
  entity.Course:
    properties:
      authors:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      banner:
        type: string
      description:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      logo:
        type: string
      modules:
        items:
          $ref: '#/definitions/entity.Module'
        type: array
      name:
        type: string
      shortDescription:
        type: string
      slug:
        type: string
      students:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.CourseDto:
    properties:
      authors:
        items:
          $ref: '#/definitions/entity.UserDto'
        type: array
      banner:
        type: string
      description:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      logo:
        type: string
      modules:
        description: 'TODO: скрыть для людей, у которых нет доступа к курсу'
        items:
          $ref: '#/definitions/entity.ModuleDto'
        type: array
      name:
        type: string
      shortDescription:
        type: string
      slug:
        type: string
    type: object
  entity.CourseRequest:
    properties:
      authors:
        items:
          type: string
        type: array
      banner:
        type: string
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      logo:
        type: string
      name:
        type: string
      shortDescription:
        type: string
    type: object
  entity.FileDto:
    properties:
      location:
        type: string
    type: object
  entity.GroupName:
    properties:
      name:
        type: string
    type: object
  entity.Link:
    properties:
      courseId:
        type: string
      id:
        type: string
      link:
        type: string
      name:
        type: string
    type: object
  entity.Module:
    properties:
      courseId:
        type: string
      id:
        type: string
      name:
        type: string
      pages:
        items:
          $ref: '#/definitions/entity.Page'
        type: array
      slug:
        type: string
    type: object
  entity.ModuleDto:
    properties:
      id:
        type: string
      name:
        type: string
      pages:
        items:
          $ref: '#/definitions/entity.PageDto'
        type: array
      slug:
        type: string
    type: object
  entity.ModuleRequest:
    properties:
      courseId:
        type: string
      name:
        type: string
    type: object
  entity.MultiChoiceSection:
    properties:
      answer:
        items:
          type: string
        type: array
      id:
        type: string
      maxScore:
        type: integer
      ownerID:
        type: string
      ownerType:
        type: string
      question:
        type: string
      variants:
        items:
          type: string
        type: array
    type: object
  entity.MultiChoiceSectionDto:
    properties:
      maxScore:
        type: integer
      question:
        type: string
      score:
        type: integer
      variants:
        items:
          type: string
        type: array
      verdict:
        type: string
    type: object
  entity.MultichoiceSectionAnswer:
    properties:
      answer:
        items:
          type: string
        type: array
      id:
        type: string
    type: object
  entity.Page:
    properties:
      id:
        type: string
      moduleId:
        type: string
      name:
        type: string
      sections:
        items:
          $ref: '#/definitions/entity.Section'
        type: array
      slug:
        type: string
    type: object
  entity.PageDto:
    properties:
      id:
        type: string
      name:
        type: string
      sections:
        items:
          $ref: '#/definitions/entity.SectionDto'
        type: array
      slug:
        type: string
    type: object
  entity.PageRequest:
    properties:
      moduleId:
        type: string
      name:
        type: string
    type: object
  entity.PasswordUpdate:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  entity.RefreshToken:
    properties:
      refreshToken:
        type: string
    type: object
  entity.Section:
    properties:
      choice:
        $ref: '#/definitions/entity.ChoiceSection'
      id:
        type: string
      multichoice:
        $ref: '#/definitions/entity.MultiChoiceSection'
      order:
        type: integer
      pageId:
        type: string
      shortanswer:
        $ref: '#/definitions/entity.ShortAnswerSection'
      text:
        $ref: '#/definitions/entity.TextSection'
    type: object
  entity.SectionDto:
    properties:
      choice:
        $ref: '#/definitions/entity.ChoiceSectionDto'
      id:
        type: string
      multichoice:
        $ref: '#/definitions/entity.MultiChoiceSectionDto'
      order:
        type: integer
      pageId:
        type: string
      shortanswer:
        $ref: '#/definitions/entity.ShortAnswerSectionDto'
      text:
        $ref: '#/definitions/entity.TextSectionDto'
    type: object
  entity.SectionPost:
    properties:
      choice:
        $ref: '#/definitions/entity.ChoiceSection'
      multichoice:
        $ref: '#/definitions/entity.MultiChoiceSection'
      order:
        type: integer
      pageId:
        type: string
      shortanswer:
        $ref: '#/definitions/entity.ShortAnswerSection'
      text:
        $ref: '#/definitions/entity.TextSection'
    type: object
  entity.Session:
    properties:
      expiresIn:
        type: string
      refreshToken:
        type: string
      userId:
        type: string
    type: object
  entity.ShortAnswerSection:
    properties:
      answer:
        type: string
      id:
        type: string
      maxScore:
        type: integer
      ownerID:
        type: string
      ownerType:
        type: string
      question:
        type: string
    type: object
  entity.ShortAnswerSectionAnswer:
    properties:
      answer:
        type: string
      id:
        type: string
    type: object
  entity.ShortAnswerSectionDto:
    properties:
      maxScore:
        type: integer
      question:
        type: string
      score:
        type: integer
      verdict:
        type: string
    type: object
  entity.SignIn:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.SignUp:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.TextSection:
    properties:
      content:
        type: string
      id:
        type: string
      ownerID:
        type: string
      ownerType:
        type: string
    type: object
  entity.TextSectionDto:
    properties:
      content:
        type: string
    type: object
  entity.Tokens:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: string
      refreshToken:
        type: string
    type: object
  entity.UpdateUserRequest:
    properties:
      avatar:
        type: string
      name:
        type: string
    type: object
  entity.User:
    properties:
      avatar:
        type: string
      courses:
        items:
          $ref: '#/definitions/entity.Course'
        type: array
      email:
        type: string
      id:
        type: string
      isVerified:
        type: boolean
      name:
        type: string
      password:
        type: string
      sessions:
        items:
          $ref: '#/definitions/entity.Session'
        type: array
      verificationCode:
        type: string
    type: object
  entity.UserDto:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: без юлерна
  version: "1.0"
paths:
  /account:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserDto'
      security:
      - ApiKeyAuth: []
      tags:
      - account
    patch:
      consumes:
      - application/json
      parameters:
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - account
  /account/courses:
    get:
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.Course'
      security:
      - ApiKeyAuth: []
      tags:
      - account
  /account/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: PasswordUpdate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.PasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      tags:
      - account
  /answer:
    post:
      parameters:
      - description: ответ
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.AnswerPost'
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/entity.SectionDto'
      security:
      - ApiKeyAuth: []
      tags:
      - answer
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: RefreshToken
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /auth/signIn:
    post:
      consumes:
      - application/json
      parameters:
      - description: SignIn
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /auth/signUp:
    post:
      consumes:
      - application/json
      parameters:
      - description: SignUp
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.SignUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /course:
    get:
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.CourseDto'
      security:
      - ApiKeyAuth: []
      tags:
      - course
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные о курсе
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.CourseRequest'
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.CourseDto'
      security:
      - ApiKeyAuth: []
      tags:
      - course
  /course/{courseId}:
    get:
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: string
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.CourseDto'
      tags:
      - course
  /course/join/{courseId}:
    patch:
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: string
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.CourseDto'
      security:
      - ApiKeyAuth: []
      tags:
      - course
  /course/slug/{slug}:
    get:
      parameters:
      - description: course slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.CourseDto'
      tags:
      - course
  /group:
    post:
      parameters:
      - description: GroupName
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.GroupName'
      responses:
        "201":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
  /join/group/{groupId}:
    patch:
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      responses:
        "200":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
  /module:
    post:
      parameters:
      - description: moduleRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ModuleRequest'
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.ModuleDto'
      security:
      - ApiKeyAuth: []
      tags:
      - module
  /page:
    post:
      parameters:
      - description: создание слайда
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.PageRequest'
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/entity.PageDto'
      security:
      - ApiKeyAuth: []
      tags:
      - page
  /page/{id}:
    get:
      parameters:
      - description: page id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.PageDto'
      security:
      - ApiKeyAuth: []
      tags:
      - page
  /section:
    post:
      consumes:
      - application/json
      parameters:
      - description: Информация для раздела
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.SectionPost'
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.SectionDto'
      security:
      - ApiKeyAuth: []
      tags:
      - section
  /teacher/{userId}/group/{groupId}:
    post:
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      responses:
        "201":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
  /upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.FileDto'
      security:
      - ApiKeyAuth: []
      tags:
      - file
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
