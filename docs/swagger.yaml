basePath: /v1
definitions:
  entity.Collaborator:
    properties:
      user_email:
        type: string
    type: object
  entity.Course:
    properties:
      author_id:
        type: string
      description:
        type: string
      id:
        type: integer
      logo:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  entity.CourseModules:
    properties:
      id:
        type: integer
      logo:
        type: string
      modules:
        items:
          $ref: '#/definitions/entity.ModuleDto'
        type: array
      name:
        type: string
      type:
        type: string
    type: object
  entity.CourseTitle:
    properties:
      author:
        $ref: '#/definitions/entity.UserDto'
      collaborators:
        items:
          $ref: '#/definitions/entity.UserDto'
        type: array
      description:
        type: string
      id:
        type: integer
      links:
        items:
          $ref: '#/definitions/entity.Link'
        type: array
      logo:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  entity.GroupName:
    properties:
      name:
        type: string
    type: object
  entity.Link:
    properties:
      link:
        type: string
      name:
        type: string
    type: object
  entity.ModuleDto:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entity.ModuleRequest:
    properties:
      name:
        type: string
    type: object
  entity.PasswordUpdate:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  entity.RefreshToken:
    properties:
      refresh_token:
        type: string
    type: object
  entity.SignIn:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.SignUp:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.Tokens:
    properties:
      access_token:
        type: string
      expires_in:
        type: string
      refresh_token:
        type: string
    type: object
  entity.UserDto:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  entity.UserName:
    properties:
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: без юлерна
  version: "1.0"
paths:
  /account:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserDto'
      security:
      - ApiKeyAuth: []
      tags:
      - account
  /account/name:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Новое имя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      tags:
      - account
  /account/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: PasswordUpdate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.PasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      tags:
      - account
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: RefreshToken
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /auth/signIn:
    post:
      consumes:
      - application/json
      parameters:
      - description: SignIn
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /auth/signUp:
    post:
      consumes:
      - application/json
      parameters:
      - description: SignUp
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.SignUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Tokens'
      tags:
      - auth
  /course:
    get:
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.Course'
      security:
      - ApiKeyAuth: []
      tags:
      - course
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: logo
        in: formData
        name: logo
        required: true
        type: file
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: description
        in: formData
        name: description
        required: true
        type: string
      - description: kotlin, math и тд
        in: formData
        name: type
        required: true
        type: string
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.Course'
      security:
      - ApiKeyAuth: []
      tags:
      - course
  /course/{courseId}:
    get:
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: integer
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.CourseModules'
      security:
      - ApiKeyAuth: []
      tags:
      - module
    post:
      parameters:
      - description: moduleRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ModuleRequest'
      - description: course id
        in: path
        name: courseId
        required: true
        type: integer
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/entity.ModuleDto'
      security:
      - ApiKeyAuth: []
      tags:
      - module
  /course/{courseId}/collaborator:
    post:
      parameters:
      - description: collaborator
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Collaborator'
      - description: course id
        in: path
        name: courseId
        required: true
        type: integer
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/entity.Link'
      security:
      - ApiKeyAuth: []
      tags:
      - course
  /course/{courseId}/link:
    post:
      parameters:
      - description: link
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Link'
      - description: course id
        in: path
        name: courseId
        required: true
        type: integer
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/entity.Link'
      security:
      - ApiKeyAuth: []
      tags:
      - course
  /course/{courseId}/title:
    get:
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: integer
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/entity.CourseTitle'
      tags:
      - course
  /group:
    post:
      parameters:
      - description: GroupName
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.GroupName'
      responses:
        "201":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
  /group/{groupId}/teacher/{userId}:
    post:
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      responses:
        "201":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
  /group/join/{groupId}:
    patch:
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      responses:
        "200":
          description: created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - group
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
